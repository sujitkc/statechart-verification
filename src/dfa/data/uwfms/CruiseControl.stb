// Evaluates the behavior for when History is maintained
//A.1 - https://cs.uwaterloo.ca/~aljuarez/Docs/Thesis_Juarez_Alma.pdf -- Page 173

/* 
ACC uses a long range radar sensor to detect the target vehicle upto 200 meters in front
Automatically adjusts the vehicle speed and gap accordingly
ACC decelerates/accelerates vehicle according to the desired speed/distance settings established by the driver
Driver can override at any time
desired distance = 50 m

*/
statechart  CruiseControl{
  
  events {
	e;
	No_event; //Signal at a cycle unit for the Stateflow model when no other event is generated
	SetAccelIn;
	SetAccelOut;
	ResumeCoastIn;
	ResumeCoastOut;
	Cancel;
	Error;
	e1;

  }
  BoolTRUE : boolean : local;
  BoolFALSE : boolean : local;
  CC_Enabled : boolean : local;
  FollowDist : int : local;
  	CC_Engaged : boolean : local;
//  AccelPedal :int: local;
	PRNDL_In :int: local;
   minusten:int:local;
  minusone:int:local;
  TargetSpeed : int : local;
  entry : {
	FollowDist:=10;
	PRNDL_In:=3;
	BoolTRUE:=true;
	BoolFALSE:=false;
	CC_Engaged:=true;
	CC_Enabled:=true;
	minusten:=0-10;
	minusone:=0-1;
	TargetSpeed:=0;
  }

  exit  : {} 
  functions {
  input<||>() : int;
  //testInput<|T|>():T;
  }
  shell CC{
	
	BrakePedal : int : local;

	
	Speed:int:local;
   // FollowDist :int:local;
   
   
   
   state sensor{
entry:{}
exit:{}
	state sense{
			from_min:int:local;
			from_max:int:local;
			to_min:int:local;
			to_max:int:local;
			to_min_threat:int:local;
			to_max_threat:int:local;
			
		entry:{


			Speed:=input<||>();
			BrakePedal:=input<||>();
			//AccelPedal:=input<||>();
			
			from_min:= minusten * 2;
			from_max:= 20;
			to_min:= 0;
			to_max:= 100;
			to_min_threat:=0;
			to_max_threat:=3;
			
			if (Speed < from_min)
				Speed := to_min;
			    else if (Speed > from_max)
				Speed := to_max;
			    else {
				Speed := (((Speed - from_min) * (to_max - to_min)) / (from_max - from_min)) + to_min;
			    }
			    
			    if (BrakePedal < from_min)
				BrakePedal := to_min;
			    else if (BrakePedal > from_max)
				BrakePedal := to_max;
			    else {
				BrakePedal := (((BrakePedal - from_min) * (to_max - to_min)) / (from_max - from_min)) + to_min;
			    }
			    
			   /*  if (AccelPedal < from_min)
				AccelPedal := to_min;
			    else if (AccelPedal > from_max)
				AccelPedal := to_max;
			    else {
				AccelPedal := (((AccelPedal - from_min) * (to_max - to_min)) / (from_max - from_min)) + to_min;
			    }*/
			    
			 
			    

	 		
		}
		exit:{}	
	}
	transition t33{
		source: CruiseControl.CC.sensor.sense;
		destination: CruiseControl.CC.sensor.sense;
		trigger: e;
		guard:true; 
		action:{}
		}
}
	state LogicControl{
	entry:{
		
		
		
		
		
	}
	exit:{}
		state Disabled{
			entry:{}
			exit:{}
		}
		state Fail{
			entry:{}
			exit:{}
		}
		state Enabled{
		//	PRNDL_In:int:local;
			
			entry:{
				PRNDL_In:=3;
					TargetSpeed:=60;
			}
			exit:{}
			state Disengaged{
				entry:{}
				exit:{}
			}
			state Override{
				entry:{}
				exit:{}
			}
			state Engaged{
				set_Throttle :int:local;
				
				
				entry:{
					
				}
				exit:{}
				state Coasting{
					entry:{}
					exit:{}
				}
				state Accelerating{
					entry:{}
					exit:{}
				}
				transition t20{
					source: CruiseControl.CC.LogicControl.Enabled.Engaged.Coasting;
					destination: CruiseControl.CC.LogicControl.Enabled.Engaged.Accelerating;
					trigger: e;
					guard:(FollowDist>50) && (Speed<TargetSpeed);
					action:{set_Throttle:=TargetSpeed-Speed;}
				}
				transition t21{
					source: CruiseControl.CC.LogicControl.Enabled.Engaged.Accelerating;
					destination: CruiseControl.CC.LogicControl.Enabled.Engaged.Coasting;
					trigger: e;
					guard:(FollowDist<=50) || (Speed>=TargetSpeed);
					action:{}
				}
			}
			transition t18{
				source: CruiseControl.CC.LogicControl.Enabled.Disengaged;
				destination: CruiseControl.CC.LogicControl.Enabled.Engaged;
				trigger: SetAccelIn;
				guard:(Speed>=40) && (PRNDL_In=3);
				action:{CC_Engaged:=BoolTRUE;}
			}
			transition t37{
				source: CruiseControl.CC.LogicControl.Enabled.Engaged;
				destination: CruiseControl.CC.LogicControl.Enabled.Disengaged;
				trigger: e1;
				guard:(Speed<40) || (PRNDL_In!=3);
				action:{CC_Engaged:=BoolFALSE;}
			}
			transition t19{
				source: CruiseControl.CC.LogicControl.Enabled.Engaged;
				destination: CruiseControl.CC.LogicControl.Enabled.Override;
				trigger: Cancel;
				guard:(true);
				action:{CC_Engaged:=BoolFALSE;}
			}
			transition t24{
				source: CruiseControl.CC.LogicControl.Enabled.Engaged;
				destination: CruiseControl.CC.LogicControl.Enabled.Override;
				trigger: e;
				guard:(BrakePedal>0);
				action:{CC_Engaged:=BoolFALSE;}
			}
			transition t25_1{
				source: CruiseControl.CC.LogicControl.Enabled.Override;
				destination: CruiseControl.CC.LogicControl.Enabled.Engaged;
				trigger: SetAccelIn;
				guard:(Speed>=40)&&(PRNDL_In=3);
				action:{CC_Engaged:=BoolTRUE;}
			}
			transition t25_2{
				source: CruiseControl.CC.LogicControl.Enabled.Override;
				destination: CruiseControl.CC.LogicControl.Enabled.Engaged;
				trigger: ResumeCoastIn;
				guard:(Speed>=40)&&(PRNDL_In=3);
				action:{CC_Engaged:=BoolTRUE;}
			}
			
		}
		transition t22{
				source: CruiseControl.CC.LogicControl.Disabled;
				destination: CruiseControl.CC.LogicControl.Enabled;
				trigger: e;
				guard:(CC_Enabled=BoolTRUE);
				action:{TargetSpeed:=0;}
		}
		transition t23{
				source: CruiseControl.CC.LogicControl.Enabled;
				destination: CruiseControl.CC.LogicControl.Disabled;
				trigger: e;
				guard:(CC_Enabled=BoolFALSE);
				action:{TargetSpeed:=0;CC_Engaged:=BoolFALSE;}
		}
		transition t26{
				source: CruiseControl.CC.LogicControl.Enabled;
				destination: CruiseControl.CC.LogicControl.Disabled;
				trigger: Error;
				guard:(true);
				action:{CC_Engaged:=BoolFALSE;}
		}
	}
	state SpeedSetting{

		entry:{}
		exit:{}
			state IncSpeed{
				entry:{}
				exit:{}
			}
			state DecSpeed{
				entry:{}
				exit:{}
			}
			state HoldSpeed{
				entry:{}
				exit:{}
			}
		transition t27{
				source: CruiseControl.CC.SpeedSetting.DecSpeed;
				destination: CruiseControl.CC.SpeedSetting.HoldSpeed;
				trigger: ResumeCoastOut;
				guard:(true);
				action:{}
		}
		transition t28{
				source: CruiseControl.CC.SpeedSetting.IncSpeed;
				destination: CruiseControl.CC.SpeedSetting.HoldSpeed;
				trigger: e;
				guard:(BrakePedal>0)||(CC_Engaged=BoolFALSE);
				action:{}
		}
		transition t30{
				source: CruiseControl.CC.SpeedSetting.DecSpeed;
				destination: CruiseControl.CC.SpeedSetting.HoldSpeed;
				trigger: e;
				guard:(BrakePedal>0)||(CC_Engaged=BoolFALSE);
				action:{}
		}
		transition t31{
				source: CruiseControl.CC.SpeedSetting.HoldSpeed;
				destination: CruiseControl.CC.SpeedSetting.IncSpeed;
				trigger: SetAccelIn;
				guard:(CC_Engaged=BoolTRUE);
				action:{TargetSpeed:=Speed;}
		}
		transition t32{
				source: CruiseControl.CC.SpeedSetting.IncSpeed;
				destination: CruiseControl.CC.SpeedSetting.HoldSpeed;
				trigger: SetAccelOut;
				guard:(true);
				action:{}
		}
		transition t33{
				source: CruiseControl.CC.SpeedSetting.IncSpeed;
				destination: CruiseControl.CC.SpeedSetting.IncSpeed;
				trigger: No_event;
				guard:(TargetSpeed<100);
				action:{TargetSpeed:=TargetSpeed+1;}
		}
		transition t34{
				source: CruiseControl.CC.SpeedSetting.DecSpeed;
				destination: CruiseControl.CC.SpeedSetting.DecSpeed;
				trigger: No_event;
				guard:(TargetSpeed>0);
				action:{TargetSpeed:=TargetSpeed-1;}
		}
		transition t35{
				source: CruiseControl.CC.SpeedSetting.HoldSpeed;
				destination: CruiseControl.CC.SpeedSetting.DecSpeed;
				trigger: ResumeCoastIn;
				guard:(CC_Engaged=BoolTRUE);
				action:{TargetSpeed:=Speed;}
		}
		
		
		
	}
	
  }
}
