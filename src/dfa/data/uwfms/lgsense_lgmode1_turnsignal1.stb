// Evaluates the behavior for when History is maintained
//A.4 - https://cs.uwaterloo.ca/~aljuarez/Docs/Thesis_Juarez_Alma.pdf

statechart lgsense{

events {
	e;
	No_event;
	Error;
	e1;
	e2;
  }
  BoolTRUE : boolean : local;
  BoolFALSE : boolean : local;
  LG_Enabled : boolean : local;
  LG_Warning : boolean :local;
  minusten:int:local;
  minusone:int:local;
  PRNDL_In:int:local;
  Speed: int: local;
  SteerIn:int:local;
  BrakePedal:int:local;
  TurnSignal:boolean:local;
  LGMode:int:local;
  set_SteerOut:int:local;
  LaneDrift:int:local;
  
  entry : {
	BoolTRUE:=true;
	BoolFALSE:=false;
	minusten:=0-10;
	minusone:=0-1;
	LG_Enabled:=true;
	PRNDL_In:=3;
	LGMode:=1;
	TurnSignal:=true;
  }
  exit  : {
  	
  } 
  functions {
  input<||>() : int;
  }
  
  
shell sh{
entry:{}
exit:{}


state sensor{
entry:{}
exit:{}
	state sense{
			from_min:int:local;
			from_max:int:local;
			to_min:int:local;
			to_max:int:local;
			
		entry:{
			SteerIn:=input<||>();
			LaneDrift:=input<||>();
			Speed:=input<||>();
			BrakePedal:=input<||>();
			
			from_min:= minusten * 2;
			from_max:= 20;
			to_min:= 0;
			to_max:= 100;
			
			if (Speed < from_min)
				Speed := to_min;
			    else if (Speed > from_max)
				Speed := to_max;
			    else {
				Speed := (((Speed - from_min) * (to_max - to_min)) / (from_max - from_min)) + to_min;
			    }
			    
			    if (BrakePedal < from_min)
				BrakePedal := to_min;
			    else if (SteerIn > from_max)
				BrakePedal := to_max;
			    else {
				BrakePedal := (((BrakePedal - from_min) * (to_max - to_min)) / (from_max - from_min)) + to_min;
			    }
		}
		exit:{}	
	}
	transition t33{
		source: lgsense.sh.sensor.sense;
		destination: lgsense.sh.sensor.sense;
		trigger: e;
		guard:true; 
		action:{}
		}
}

state LaneGuide{
	entry:{}
	exit:{}  
  
	state Fail{
		entry:{}
		exit:{}
	}
	state Disabled{
		entry:{}
		exit:{}
	}
	state Enabled{
		
		
		entry:{}
		exit:{}
			state Disengaged{
				entry:{}
				exit:{}
			}
			state Override{
				entry:{}
				exit:{}
			}
			state Engaged{
				
				
				entry:{
					
				}
				exit:{}
				state WarnLeft{
					entry:{}
					exit:{}
				}
				state Idle{
					entry:{}
					exit:{}
				}
				state AssistLeft{
					entry:{}
					exit:{}
				}
				state WarnRight{
					entry:{}
					exit:{}
				}
				state AssistRight{
					entry:{}
					exit:{}
				}
				transition t16{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.Idle;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.WarnLeft;
					trigger: e;
					guard:(LaneDrift<minusten)&&(LGMode=0); //LaneDrift<-10
					action:{LG_Warning:=BoolTRUE;}
				}	
				transition t17{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.WarnLeft;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.Idle;
					trigger: e1;
					guard:(LaneDrift>minusten); //LaneDrift>-10
					action:{LG_Warning:=BoolFALSE;}
				}
				transition t20{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.WarnLeft;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.AssistLeft;
					trigger: e2;
					guard:(LGMode=1); 
					action:{LG_Warning:=BoolFALSE;set_SteerOut:=minusone;} //set_SteerOut:=-1
				}
				transition t19{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.AssistLeft;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.WarnLeft;
					trigger: e;
					guard:(LGMode=0); 
					action:{LG_Warning:=BoolTRUE;} 
				}
				transition t21{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.AssistLeft;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.Idle;
					trigger: e;
					guard:(LaneDrift>minusten); //LaneDrift>-10
					action:{LG_Warning:=BoolFALSE;}
				}
				transition t22{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.Idle;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.AssistLeft;
					trigger: e;
					guard:(LaneDrift<minusten)&&(LGMode=1); //LaneDrift<-10
					action:{LG_Warning:=BoolFALSE;set_SteerOut:=minusone;} //set_SteerOut:=-1
				}
				transition t23{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.Idle;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.WarnRight;
					trigger: e;
					guard:(LaneDrift>10)&&(LGMode=0); 
					action:{LG_Warning:=BoolTRUE;}
				}
				transition t24{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.WarnRight;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.Idle;
					trigger: e;
					guard:(LaneDrift<10); 
					action:{LG_Warning:=BoolFALSE;}
				}
				transition t25{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.WarnRight;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.AssistRight;
					trigger: e;
					guard:(LGMode=1); 
					action:{LG_Warning:=BoolTRUE;set_SteerOut:=1;}
				}
				transition t26{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.AssistRight;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.WarnRight;
					trigger: e;
					guard:(LGMode=0); 
					action:{LG_Warning:=BoolTRUE;}
				}
				transition t27{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.AssistRight;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.Idle;
					trigger: e;
					guard:(LaneDrift<10); 
					action:{LG_Warning:=BoolFALSE;}
				}
				transition t28{
					source: lgsense.sh.LaneGuide.Enabled.Engaged.Idle;
					destination: lgsense.sh.LaneGuide.Enabled.Engaged.AssistRight;
					trigger: e;
					guard:(LaneDrift>10)&&(LGMode=1); 
					action:{LG_Warning:=BoolFALSE;set_SteerOut:=1;}
				}
				
			}
			transition t35{
				source: lgsense.sh.LaneGuide.Enabled.Disengaged;
				destination: lgsense.sh.LaneGuide.Enabled.Engaged;
				trigger: e;
				guard:(Speed<40)||(PRNDL_In!=3);
				action:{LG_Warning:=BoolFALSE;}
			}
			transition t34{
				source: lgsense.sh.LaneGuide.Enabled.Disengaged;
				destination: lgsense.sh.LaneGuide.Enabled.Engaged;
				trigger: e;
				guard:(Speed>=40)&&(PRNDL_In=3);
				action:{}
			}
			transition t29{
				source: lgsense.sh.LaneGuide.Enabled.Override;
				destination: lgsense.sh.LaneGuide.Enabled.Disengaged;
				trigger: e;
				guard:(SteerIn=0)&&(TurnSignal=BoolFALSE)&&(BrakePedal=0);
				action:{}
			}
			transition t30{
				source: lgsense.sh.LaneGuide.Enabled.Engaged;
				destination: lgsense.sh.LaneGuide.Enabled.Override;
				trigger: e;
				guard:(SteerIn>10)||(SteerIn<minusten)||(TurnSignal=BoolTRUE)||(BrakePedal>0); // SteerIn<-10
				action:{LG_Warning:=BoolFALSE;}
			}
			transition t36{
				source: lgsense.sh.LaneGuide.Enabled.Engaged;
				destination: lgsense.sh.LaneGuide.Enabled.Disengaged;
				trigger: e;
				guard:(Speed<40)||(PRNDL_In!=3); 
				action:{LG_Warning:=BoolFALSE;}
			}
			
	}
	transition t14{
		source: lgsense.sh.LaneGuide.Disabled;
		destination: lgsense.sh.LaneGuide.Enabled;
		trigger: e;
		guard:(LG_Enabled=BoolTRUE);
		action:{}
	}
	transition t15{
		source: lgsense.sh.LaneGuide.Enabled;
		destination: lgsense.sh.LaneGuide.Disabled;
		trigger: e;
		guard:(LG_Enabled=BoolFALSE);
		action:{LG_Warning:=BoolFALSE;}
	}
	transition t31{
		source: lgsense.sh.LaneGuide.Fail;
		destination: lgsense.sh.LaneGuide.Enabled;
		trigger: Error;
		guard:true;
		action:{LG_Warning:=BoolFALSE;}
	}
}
}
}
