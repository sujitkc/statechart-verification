
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 09 17:16:49 IST 2023
//----------------------------------------------------

package frontend;

import java_cup.runtime.*;
import java_cup.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 09 17:16:49 IST 2023
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\005\003\000\002\005" +
    "\005\000\002\002\016\000\002\002\017\000\002\040\006" +
    "\000\002\040\002\000\002\041\004\000\002\041\002\000" +
    "\002\042\003\000\002\042\003\000\002\043\010\000\002" +
    "\044\003\000\002\044\002\000\002\045\005\000\002\045" +
    "\003\000\002\031\007\000\002\031\012\000\002\036\006" +
    "\000\002\036\002\000\002\035\005\000\002\035\002\000" +
    "\002\021\011\000\002\021\014\000\002\017\003\000\002" +
    "\017\002\000\002\020\005\000\002\020\003\000\002\022" +
    "\006\000\002\022\002\000\002\023\004\000\002\023\002" +
    "\000\002\003\014\000\002\003\013\000\002\003\012\000" +
    "\002\003\013\000\002\051\005\000\002\051\002\000\002" +
    "\052\005\000\002\052\002\000\002\006\004\000\002\006" +
    "\002\000\002\004\026\000\002\037\006\000\002\037\002" +
    "\000\002\007\004\000\002\007\002\000\002\012\003\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\005\000\002\012\003\000\002\012" +
    "\004\000\002\027\006\000\002\024\006\000\002\024\005" +
    "\000\002\025\003\000\002\025\002\000\002\026\005\000" +
    "\002\026\003\000\002\032\003\000\002\032\003\000\002" +
    "\034\003\000\002\034\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\010\004\000\002\010\002\000\002\011" +
    "\004\000\002\011\006\000\002\011\005\000\002\011\007" +
    "\000\002\011\005\000\002\013\004\000\002\013\002\000" +
    "\002\014\004\000\002\014\004\000\002\015\007\000\002" +
    "\016\006\000\002\046\003\000\002\046\006\000\002\047" +
    "\003\000\002\050\005\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\026\005\001\002\000\004\002\351\001" +
    "\002\000\004\004\006\001\002\000\004\007\007\001\002" +
    "\000\030\004\ufffb\010\ufffb\027\ufffb\030\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\062\011\064\ufffb\065\010\066\ufffb\001\002" +
    "\000\026\004\ufffb\010\ufffb\027\ufffb\030\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\062\011\064\ufffb\066\ufffb\001\002\000\004" +
    "\007\310\001\002\000\024\004\uffee\010\uffee\027\uffee\030" +
    "\uffee\036\uffee\037\uffee\040\013\064\uffee\066\uffee\001\002" +
    "\000\004\007\303\001\002\000\022\004\uffab\010\uffab\027" +
    "\uffab\030\uffab\036\uffab\037\uffab\064\uffab\066\uffab\001\002" +
    "\000\022\004\020\010\uffdc\027\uffdc\030\uffdc\036\017\037" +
    "\uffdc\064\uffdc\066\uffdc\001\002\000\022\004\uffac\010\uffac" +
    "\027\uffac\030\uffac\036\uffac\037\uffac\064\uffac\066\uffac\001" +
    "\002\000\004\016\301\001\002\000\006\016\157\021\276" +
    "\001\002\000\004\015\275\001\002\000\016\010\uffda\027" +
    "\uffda\030\uffda\037\026\064\uffda\066\uffda\001\002\000\004" +
    "\015\024\001\002\000\022\004\uffaa\010\uffaa\027\uffaa\030" +
    "\uffaa\036\uffaa\037\uffaa\064\uffaa\066\uffaa\001\002\000\014" +
    "\010\uffe4\027\uffe4\030\uffe4\064\136\066\uffe4\001\002\000" +
    "\004\016\027\001\002\000\030\004\035\005\036\006\046" +
    "\007\042\011\041\023\033\024\040\055\043\056\034\057" +
    "\037\060\047\001\002\000\014\010\uffdb\027\uffdb\030\uffdb" +
    "\064\uffdb\066\uffdb\001\002\000\034\015\134\041\057\042" +
    "\074\043\061\044\071\045\060\046\067\047\064\050\073" +
    "\051\065\052\063\053\072\054\066\001\002\000\022\004" +
    "\035\005\036\006\046\011\041\055\043\056\034\057\037" +
    "\060\047\001\002\000\022\004\035\005\036\006\046\011" +
    "\041\055\043\056\034\057\037\060\047\001\002\000\022" +
    "\004\uffc0\005\uffc0\006\uffc0\011\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\001\002\000\074\004\000\005\000\006\000" +
    "\007\000\011\000\012\000\013\116\015\000\017\000\020" +
    "\000\022\000\023\000\024\000\041\000\042\000\043\000" +
    "\044\000\045\000\046\000\047\000\050\000\051\000\052" +
    "\000\053\000\054\000\055\000\056\000\057\000\060\000" +
    "\001\002\000\066\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\012\uffcf\015\uffcf\017\uffcf\023\uffcf\024\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\001\002\000\066\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\011\uffc3\012\uffc3\015\uffc3\017\uffc3\023\uffc3" +
    "\024\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\001\002\000\022\004" +
    "\035\005\036\006\046\011\041\055\043\056\034\057\037" +
    "\060\047\001\002\000\022\004\035\005\036\006\046\011" +
    "\041\055\043\056\034\057\037\060\047\001\002\000\032" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\023" +
    "\uffb2\024\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\001\002" +
    "\000\022\004\uffc1\005\uffc1\006\uffc1\011\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\001\002\000\066\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\011\uffcc\012\uffcc\015\uffcc\017\uffcc\023" +
    "\uffcc\024\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\001\002\000\004" +
    "\011\076\001\002\000\066\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\011\uffce\012\uffce\015\uffce\017\uffce\023\uffce\024\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\060\uffce\001\002\000\066\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\011\uffc2\012\uffc2\015\uffc2\017\uffc2" +
    "\023\uffc2\024\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\001\002\000" +
    "\066\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0" +
    "\015\uffd0\017\uffd0\023\uffd0\024\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\001\002\000\040\015\uffd2\020\053\022\052\041\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\001\002\000\022" +
    "\004\035\005\036\006\046\011\041\055\043\056\034\057" +
    "\037\060\047\001\002\000\004\004\054\001\002\000\072" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\011\uffff\012\uffff\015" +
    "\uffff\017\uffff\020\uffff\022\uffff\023\uffff\024\uffff\041\uffff" +
    "\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050" +
    "\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\057\uffff\060\uffff\001\002\000\070\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\011\uffd2\012\uffd2\015\uffd2\017\uffd2\020\053" +
    "\023\uffd2\024\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\001\002\000" +
    "\034\015\070\041\057\042\074\043\061\044\071\045\060" +
    "\046\067\047\064\050\073\051\065\052\063\053\072\054" +
    "\066\001\002\000\022\004\uffb5\005\uffb5\006\uffb5\011\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002\000\022\004" +
    "\uffbb\005\uffbb\006\uffbb\011\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\001\002\000\022\004\uffb7\005\uffb7\006\uffb7\011" +
    "\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\001\002\000\022" +
    "\004\035\005\036\006\046\011\041\055\043\056\034\057" +
    "\037\060\047\001\002\000\022\004\uffbf\005\uffbf\006\uffbf" +
    "\011\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\001\002\000" +
    "\022\004\uffb9\005\uffb9\006\uffb9\011\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\001\002\000\022\004\uffbd\005\uffbd\006" +
    "\uffbd\011\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002" +
    "\000\022\004\uffbc\005\uffbc\006\uffbc\011\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\001\002\000\022\004\uffba\005\uffba" +
    "\006\uffba\011\uffba\055\uffba\056\uffba\057\uffba\060\uffba\001" +
    "\002\000\046\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0\037" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\064\uffb0\066\uffb0" +
    "\001\002\000\022\004\uffb6\005\uffb6\006\uffb6\011\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\001\002\000\022\004\uffbe" +
    "\005\uffbe\006\uffbe\011\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\001\002\000\022\004\uffb8\005\uffb8\006\uffb8\011\uffb8" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\001\002\000\022\004" +
    "\uffb4\005\uffb4\006\uffb4\011\uffb4\055\uffb4\056\uffb4\057\uffb4" +
    "\060\uffb4\001\002\000\066\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\011\uffd1\012\uffd1\015\uffd1\017\uffd1\023\uffd1\024\uffd1" +
    "\041\057\042\074\043\061\044\071\045\060\046\067\047" +
    "\064\050\073\051\065\052\063\053\072\054\066\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\001\002\000\024\004\035\005" +
    "\036\006\046\011\041\012\uffc6\055\043\056\034\057\037" +
    "\060\047\001\002\000\006\012\uffc7\017\103\001\002\000" +
    "\004\012\102\001\002\000\036\012\uffc4\017\uffc4\041\057" +
    "\042\074\043\061\044\071\045\060\046\067\047\064\050" +
    "\073\051\065\052\063\053\072\054\066\001\002\000\066" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\011\uffca\012\uffca\015" +
    "\uffca\017\uffca\023\uffca\024\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\001\002\000\022\004\035\005\036\006\046\011\041\055" +
    "\043\056\034\057\037\060\047\001\002\000\036\012\uffc5" +
    "\017\uffc5\041\057\042\074\043\061\044\071\045\060\046" +
    "\067\047\064\050\073\051\065\052\063\053\072\054\066" +
    "\001\002\000\032\004\035\005\036\006\046\007\042\010" +
    "\107\011\041\023\033\024\040\055\043\056\034\057\037" +
    "\060\047\001\002\000\032\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\023\uffb3\024\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\001\002\000\046\004\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\027\uffaf\030\uffaf\037\uffaf\055\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\064\uffaf\066\uffaf\001\002\000\034\012\111\041\057" +
    "\042\074\043\061\044\071\045\060\046\067\047\064\050" +
    "\073\051\065\052\063\053\072\054\066\001\002\000\066" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\015" +
    "\uffcd\017\uffcd\023\uffcd\024\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\001\002\000\060\004\035\005\036\006\046\007\042\011" +
    "\041\023\033\024\040\041\057\042\074\043\061\044\071" +
    "\045\060\046\067\047\064\050\073\051\065\052\063\053" +
    "\072\054\066\055\043\056\034\057\037\060\047\001\002" +
    "\000\004\025\114\001\002\000\030\004\035\005\036\006" +
    "\046\007\042\011\041\023\033\024\040\055\043\056\034" +
    "\057\037\060\047\001\002\000\046\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\023\uffae\024\uffae\025\uffae" +
    "\027\uffae\030\uffae\037\uffae\055\uffae\056\uffae\057\uffae\060" +
    "\uffae\064\uffae\066\uffae\001\002\000\006\004\122\014\120" +
    "\001\002\000\006\014\130\017\125\001\002\000\004\011" +
    "\uffc8\001\002\000\006\014\uffa2\017\uffa2\001\002\000\014" +
    "\013\123\014\uffa6\015\uffa6\016\uffa6\017\uffa6\001\002\000" +
    "\004\004\122\001\002\000\006\014\126\017\125\001\002" +
    "\000\004\004\122\001\002\000\012\014\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\001\002\000\006\014\uffa3\017\uffa3\001\002" +
    "\000\004\011\uffc9\001\002\000\060\004\035\005\036\006" +
    "\046\007\042\011\041\023\033\024\040\041\057\042\074" +
    "\043\061\044\071\045\060\046\067\047\064\050\073\051" +
    "\065\052\063\053\072\054\066\055\043\056\034\057\037" +
    "\060\047\001\002\000\046\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\023\uffad\024\uffad\025\uffad\027\uffad" +
    "\030\uffad\037\uffad\055\uffad\056\uffad\057\uffad\060\uffad\064" +
    "\uffad\066\uffad\001\002\000\066\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\011\uffcb\012\uffcb\015\uffcb\017\uffcb\023\uffcb\024" +
    "\uffcb\041\057\042\074\043\061\044\071\045\060\046\067" +
    "\047\064\050\073\051\065\052\063\053\072\054\066\055" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\001\002\000\046\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\027\uffb1\030\uffb1\037\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\064\uffb1\066\uffb1\001\002\000\012\010" +
    "\uffd8\027\uffd8\030\uffd8\066\uffd8\001\002\000\004\007\137" +
    "\001\002\000\006\004\uffe2\010\uffe2\001\002\000\006\004" +
    "\141\010\142\001\002\000\006\011\144\013\145\001\002" +
    "\000\012\010\uffe5\027\uffe5\030\uffe5\066\uffe5\001\002\000" +
    "\006\004\uffe3\010\uffe3\001\002\000\006\004\155\012\uffe8" +
    "\001\002\000\006\004\147\014\ufff4\001\002\000\006\014" +
    "\ufff5\017\172\001\002\000\006\014\ufff2\017\ufff2\001\002" +
    "\000\004\014\151\001\002\000\004\011\152\001\002\000" +
    "\006\004\155\012\uffe8\001\002\000\006\012\uffe9\017\170" +
    "\001\002\000\004\012\164\001\002\000\004\016\157\001" +
    "\002\000\006\012\uffe6\017\uffe6\001\002\000\004\004\122" +
    "\001\002\000\004\016\161\001\002\000\004\004\163\001" +
    "\002\000\010\012\uffa8\015\uffa8\017\uffa8\001\002\000\010" +
    "\012\uffa4\015\uffa4\017\uffa4\001\002\000\004\016\165\001" +
    "\002\000\004\004\122\001\002\000\004\015\167\001\002" +
    "\000\006\004\uffea\010\uffea\001\002\000\004\004\155\001" +
    "\002\000\006\012\uffe7\017\uffe7\001\002\000\004\004\173" +
    "\001\002\000\006\014\ufff3\017\ufff3\001\002\000\004\012" +
    "\175\001\002\000\004\016\176\001\002\000\004\004\122" +
    "\001\002\000\004\015\200\001\002\000\006\004\uffeb\010" +
    "\uffeb\001\002\000\012\010\uffd3\027\204\030\uffd3\066\202" +
    "\001\002\000\004\004\260\001\002\000\012\010\uffd9\027" +
    "\uffd9\030\uffd9\066\uffd9\001\002\000\004\004\241\001\002" +
    "\000\006\010\207\030\206\001\002\000\004\004\211\001" +
    "\002\000\004\002\ufffe\001\002\000\006\010\uffd4\030\uffd4" +
    "\001\002\000\004\007\212\001\002\000\004\031\213\001" +
    "\002\000\004\016\214\001\002\000\004\004\216\001\002" +
    "\000\006\015\217\020\053\001\002\000\006\015\000\020" +
    "\000\001\002\000\004\032\220\001\002\000\004\016\221" +
    "\001\002\000\004\004\216\001\002\000\006\015\223\020" +
    "\053\001\002\000\006\033\225\034\uffd5\001\002\000\004" +
    "\034\231\001\002\000\004\016\226\001\002\000\004\004" +
    "\227\001\002\000\004\015\230\001\002\000\004\034\uffd6" +
    "\001\002\000\004\016\232\001\002\000\022\004\035\005" +
    "\036\006\046\011\041\055\043\056\034\057\037\060\047" +
    "\001\002\000\034\015\234\041\057\042\074\043\061\044" +
    "\071\045\060\046\067\047\064\050\073\051\065\052\063" +
    "\053\072\054\066\001\002\000\004\035\235\001\002\000" +
    "\004\016\236\001\002\000\030\004\035\005\036\006\046" +
    "\007\042\011\041\023\033\024\040\055\043\056\034\057" +
    "\037\060\047\001\002\000\004\010\240\001\002\000\006" +
    "\010\uffd7\030\uffd7\001\002\000\004\007\242\001\002\000" +
    "\022\004\uffab\010\uffab\027\uffab\030\uffab\036\uffab\037\uffab" +
    "\065\243\066\uffab\001\002\000\020\004\uffab\010\uffab\027" +
    "\uffab\030\uffab\036\uffab\037\uffab\066\uffab\001\002\000\020" +
    "\004\020\010\uffdc\027\uffdc\030\uffdc\036\017\037\uffdc\066" +
    "\uffdc\001\002\000\014\010\uffda\027\uffda\030\uffda\037\026" +
    "\066\uffda\001\002\000\012\010\uffd8\027\uffd8\030\uffd8\066" +
    "\uffd8\001\002\000\012\010\uffd3\027\204\030\uffd3\066\202" +
    "\001\002\000\006\010\251\030\206\001\002\000\012\010" +
    "\uffde\027\uffde\030\uffde\066\uffde\001\002\000\020\004\020" +
    "\010\uffdc\027\uffdc\030\uffdc\036\017\037\uffdc\066\uffdc\001" +
    "\002\000\014\010\uffda\027\uffda\030\uffda\037\026\066\uffda" +
    "\001\002\000\012\010\uffd8\027\uffd8\030\uffd8\066\uffd8\001" +
    "\002\000\012\010\uffd3\027\204\030\uffd3\066\202\001\002" +
    "\000\006\010\257\030\206\001\002\000\012\010\uffe1\027" +
    "\uffe1\030\uffe1\066\uffe1\001\002\000\004\007\261\001\002" +
    "\000\020\004\uffab\010\uffab\027\uffab\036\uffab\037\uffab\065" +
    "\262\066\uffab\001\002\000\016\004\uffab\010\uffab\027\uffab" +
    "\036\uffab\037\uffab\066\uffab\001\002\000\016\004\020\010" +
    "\uffdc\027\uffdc\036\017\037\uffdc\066\uffdc\001\002\000\012" +
    "\010\uffda\027\uffda\037\026\066\uffda\001\002\000\010\010" +
    "\uffd8\027\uffd8\066\uffd8\001\002\000\010\010\267\027\204" +
    "\066\202\001\002\000\012\010\uffdf\027\uffdf\030\uffdf\066" +
    "\uffdf\001\002\000\016\004\020\010\uffdc\027\uffdc\036\017" +
    "\037\uffdc\066\uffdc\001\002\000\012\010\uffda\027\uffda\037" +
    "\026\066\uffda\001\002\000\010\010\uffd8\027\uffd8\066\uffd8" +
    "\001\002\000\010\010\274\027\204\066\202\001\002\000" +
    "\012\010\uffe0\027\uffe0\030\uffe0\066\uffe0\001\002\000\022" +
    "\004\uffa9\010\uffa9\027\uffa9\030\uffa9\036\uffa9\037\uffa9\064" +
    "\uffa9\066\uffa9\001\002\000\004\016\277\001\002\000\004" +
    "\004\122\001\002\000\004\015\uffa7\001\002\000\030\004" +
    "\035\005\036\006\046\007\042\011\041\023\033\024\040" +
    "\055\043\056\034\057\037\060\047\001\002\000\016\010" +
    "\uffdd\027\uffdd\030\uffdd\037\uffdd\064\uffdd\066\uffdd\001\002" +
    "\000\006\004\uffec\010\uffec\001\002\000\006\004\305\010" +
    "\306\001\002\000\004\015\307\001\002\000\022\004\uffef" +
    "\010\uffef\027\uffef\030\uffef\036\uffef\037\uffef\064\uffef\066" +
    "\uffef\001\002\000\006\004\uffed\010\uffed\001\002\000\010" +
    "\010\ufff9\061\ufff9\063\ufff9\001\002\000\010\010\314\061" +
    "\315\063\317\001\002\000\010\010\ufff8\061\ufff8\063\ufff8" +
    "\001\002\000\010\010\ufffa\061\ufffa\063\ufffa\001\002\000" +
    "\024\004\ufffc\010\ufffc\027\ufffc\030\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\064\ufffc\066\ufffc\001\002\000\006\004\325\013" +
    "\326\001\002\000\010\010\ufff7\061\ufff7\063\ufff7\001\002" +
    "\000\004\004\320\001\002\000\004\013\321\001\002\000" +
    "\006\004\147\014\ufff4\001\002\000\004\014\323\001\002" +
    "\000\004\015\324\001\002\000\010\010\ufff6\061\ufff6\063" +
    "\ufff6\001\002\000\004\007\335\001\002\000\006\004\147" +
    "\014\ufff4\001\002\000\004\014\330\001\002\000\004\004" +
    "\331\001\002\000\004\007\332\001\002\000\006\004\uffab" +
    "\010\uffab\001\002\000\006\004\020\010\334\001\002\000" +
    "\010\010\ufff0\061\ufff0\063\ufff0\001\002\000\006\004\uffab" +
    "\010\uffab\001\002\000\006\004\020\010\337\001\002\000" +
    "\010\010\ufff1\061\ufff1\063\ufff1\001\002\000\024\004\uffee" +
    "\010\uffee\027\uffee\030\uffee\036\uffee\037\uffee\040\013\064" +
    "\uffee\066\uffee\001\002\000\022\004\uffab\010\uffab\027\uffab" +
    "\030\uffab\036\uffab\037\uffab\064\uffab\066\uffab\001\002\000" +
    "\022\004\020\010\uffdc\027\uffdc\030\uffdc\036\017\037\uffdc" +
    "\064\uffdc\066\uffdc\001\002\000\016\010\uffda\027\uffda\030" +
    "\uffda\037\026\064\uffda\066\uffda\001\002\000\014\010\uffe4" +
    "\027\uffe4\030\uffe4\064\136\066\uffe4\001\002\000\012\010" +
    "\uffd8\027\uffd8\030\uffd8\066\uffd8\001\002\000\012\010\uffd3" +
    "\027\204\030\uffd3\066\202\001\002\000\006\010\350\030" +
    "\206\001\002\000\004\002\ufffd\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\011\001\001" +
    "\000\004\040\337\001\001\000\002\001\001\000\004\036" +
    "\013\001\001\000\002\001\001\000\004\013\014\001\001" +
    "\000\012\014\015\015\022\016\020\051\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\134\001\001\000\002\001\001" +
    "\000\020\005\050\011\027\012\030\024\044\027\043\032" +
    "\047\034\031\001\001\000\002\001\001\000\004\033\061" +
    "\001\001\000\016\005\054\012\132\024\044\027\043\032" +
    "\047\034\031\001\001\000\016\005\054\012\130\024\044" +
    "\027\043\032\047\034\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\054\012\111\024\044\027\043\032\047\034\031\001" +
    "\001\000\016\005\054\012\107\024\044\027\043\032\047" +
    "\034\031\001\001\000\004\010\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\054\012\055\024\044\027\043\032\047\034\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\054\012\074\024" +
    "\044\027\043\032\047\034\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\061\001\001\000\022\005\054\012\100\024\044\025\077" +
    "\026\076\027\043\032\047\034\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\061\001\001\000\002" +
    "\001\001\000\016\005\054\012\103\024\044\027\043\032" +
    "\047\034\031\001\001\000\004\033\061\001\001\000\020" +
    "\005\050\011\105\012\030\024\044\027\043\032\047\034" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\061\001\001\000\002\001\001\000\022\005\050\011" +
    "\112\012\030\024\044\027\043\032\047\033\061\034\031" +
    "\001\001\000\002\001\001\000\020\005\050\011\114\012" +
    "\030\024\044\027\043\032\047\034\031\001\001\000\002" +
    "\001\001\000\006\046\120\050\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\046\120\050\123\001\001\000\002\001\001\000" +
    "\004\046\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\050\011\131\012\030\024" +
    "\044\027\043\032\047\033\061\034\031\001\001\000\002" +
    "\001\001\000\004\033\061\001\001\000\002\001\001\000" +
    "\004\006\200\001\001\000\002\001\001\000\004\023\137" +
    "\001\001\000\004\021\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\155\017\173" +
    "\020\152\001\001\000\006\044\147\045\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\155\017\153\020\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\157\001\001\000\002\001\001\000" +
    "\004\047\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\202\007\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\221\001\001\000\002\001\001\000\004\037" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\054\012\232\024\044\027\043\032\047" +
    "\034\031\001\001\000\004\033\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\050\011\236\012\030" +
    "\024\044\027\043\032\047\034\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\243" +
    "\001\001\000\004\013\251\001\001\000\012\014\015\015" +
    "\022\016\020\051\244\001\001\000\004\052\245\001\001" +
    "\000\004\006\246\001\001\000\006\003\202\007\247\001" +
    "\001\000\004\004\207\001\001\000\002\001\001\000\012" +
    "\014\015\015\022\016\020\051\252\001\001\000\004\052" +
    "\253\001\001\000\004\006\254\001\001\000\006\003\202" +
    "\007\255\001\001\000\004\004\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\262\001\001\000\004" +
    "\013\267\001\001\000\012\014\015\015\022\016\020\051" +
    "\263\001\001\000\004\052\264\001\001\000\004\006\265" +
    "\001\001\000\004\003\202\001\001\000\002\001\001\000" +
    "\012\014\015\015\022\016\020\051\270\001\001\000\004" +
    "\052\271\001\001\000\004\006\272\001\001\000\004\003" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\277\001\001\000\002\001\001\000" +
    "\020\005\050\011\301\012\030\024\044\027\043\032\047" +
    "\034\031\001\001\000\002\001\001\000\004\035\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\310\001\001\000\010\031" +
    "\315\042\312\043\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\321" +
    "\045\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\326\045\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\332\001\001\000\010\014\015\015\022" +
    "\016\020\001\001\000\002\001\001\000\004\013\335\001" +
    "\001\000\010\014\015\015\022\016\020\001\001\000\002" +
    "\001\001\000\004\036\340\001\001\000\004\013\341\001" +
    "\001\000\012\014\015\015\022\016\020\051\342\001\001" +
    "\000\004\052\343\001\001\000\004\022\344\001\001\000" +
    "\004\006\345\001\001\000\006\003\202\007\346\001\001" +
    "\000\004\004\207\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static String strliteral = "";

  public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
      + " column " + s.right+"Symbol <"+s.toString()+">");
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  ast.Statechart statechart = null;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // typenames ::= typename 
            {
              List<ast.TypeName> RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.TypeName tn = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ArrayList<ast.TypeName>();
      RESULT.add(tn);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typenames",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // typenames ::= typenames COMMA typename 
            {
              List<ast.TypeName> RESULT =null;
		int tnsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tnsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ast.TypeName> tns = (List<ast.TypeName>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.TypeName tn = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = tns;
      RESULT.add(tn);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typenames",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // scopename ::= IDENTIFIER 
            {
              ast.ScopeName RESULT =null;
		int sidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(sid.equals("static") | sid.equals("parameter") | sid.equals("local"))
      RESULT = new ast.ScopeName(sid);
    else
      throw new Exception("Invalid Scope Declaration");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scopename",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // typename ::= IDENTIFIER LTRI typenames RTRI 
            {
              ast.TypeName RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int targsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int targsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.TypeName> targs = (List<ast.TypeName>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.TypeName(tid, targs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // typename ::= IDENTIFIER 
            {
              ast.TypeName RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.TypeName(tid);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // inp_decl ::= IDENTIFIER HASH COLON typename 
            {
              ast.Declaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.TypeName tid = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.Declaration(id, new ast.ScopeName("local"), tid, true);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inp_decl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // normal_decl ::= IDENTIFIER COLON typename COLON scopename 
            {
              ast.Declaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.TypeName tid = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.ScopeName sid = (ast.ScopeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.Declaration(id, sid, tid, false);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normal_decl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // decl ::= inp_decl SEMICOLON 
            {
              ast.Declaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Declaration d = (ast.Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = d;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // decl ::= normal_decl SEMICOLON 
            {
              ast.Declaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Declaration d = (ast.Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = d;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // decl_list ::= 
            {
              ast.DeclarationList RESULT =null;
		
      RESULT = new ast.DeclarationList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // decl_list ::= decl_list decl 
            {
              ast.DeclarationList RESULT =null;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Declaration d = (ast.Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = dlist;
      if(!RESULT.add(d)) {
        throw new Exception("Duplication variable name '" + d.vname + "' declaration in same scope.");
      }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= WHILE expr statement 
            {
              ast.Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Expression e = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Statement s = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.WhileStatement(e, s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= IF expr statement ELSE statement 
            {
              ast.Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Expression e = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Statement s1 = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Statement s2 = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.IfStatement(e, s1, s2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= LBRACE statement_list RBRACE 
            {
              ast.Statement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.StatementList sl = (ast.StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = sl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= name ASSIGN expr SEMICOLON 
            {
              ast.Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Name n = (ast.Name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Expression e = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.AssignmentStatement(n, e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= expr SEMICOLON 
            {
              ast.Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Expression e = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.ExpressionStatement(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement_list ::= 
            {
              ast.StatementList RESULT =null;
		
      RESULT = new ast.StatementList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement_list ::= statement_list statement 
            {
              ast.StatementList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.StatementList sl = (ast.StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Statement s = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      sl.add(s);
      RESULT = sl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binop ::= OR 
            {
              String RESULT =null;
		 RESULT = "||"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binop ::= AND 
            {
              String RESULT =null;
		 RESULT = "&&"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binop ::= NE 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binop ::= EQ 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binop ::= LT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binop ::= LE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binop ::= GT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= GE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= SUB 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= MUL 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= ADD 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unaryop ::= NOT 
            {
              String RESULT =null;
		 RESULT = "!"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unaryop ::= UMIN 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryop",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // boolconst ::= FALSE 
            {
              ast.BooleanConstant RESULT =null;
		
      RESULT = new ast.BooleanConstant(false);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolconst",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // boolconst ::= TRUE 
            {
              ast.BooleanConstant RESULT =null;
		
      RESULT = new ast.BooleanConstant(true);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolconst",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // non_empty_arg_list ::= expr 
            {
              List<ast.Expression> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Expression arg = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new ArrayList<ast.Expression>();
    RESULT.add(arg);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_arg_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // non_empty_arg_list ::= non_empty_arg_list COMMA expr 
            {
              List<ast.Expression> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ast.Expression> args = (List<ast.Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Expression arg = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = args;
    RESULT.add(arg);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_arg_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arg_list ::= 
            {
              List<ast.Expression> RESULT =null;
		
    RESULT = new ArrayList<ast.Expression>();
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arg_list ::= non_empty_arg_list 
            {
              List<ast.Expression> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ast.Expression> args = (List<ast.Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = args;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // func_name ::= IDENTIFIER LTRI RTRI 
            {
              ast.FunctionName RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
      RESULT = new ast.FunctionName(tid, new ArrayList<ast.TypeName>());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_name",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // func_name ::= IDENTIFIER LTRI typenames RTRI 
            {
              ast.FunctionName RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int targsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int targsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.TypeName> targs = (List<ast.TypeName>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.FunctionName(tid, targs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_name",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // func_call ::= func_name LPAREN arg_list RPAREN 
            {
              ast.FunctionCall RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.FunctionName f = (ast.FunctionName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int alistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Expression> alist = (List<ast.Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new ast.FunctionCall(f, alist);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= unaryop expr 
            {
              ast.Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Expression e = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.UnaryExpression(e, op);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= func_call 
            {
              ast.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.FunctionCall e = (ast.FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= LPAREN expr RPAREN 
            {
              ast.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Expression e = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= STRLITERAL 
            {
              ast.Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.StringLiteral(s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= INTCONST 
            {
              ast.Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.IntegerConstant(n);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= boolconst 
            {
              ast.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.BooleanConstant e = (ast.BooleanConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr binop expr 
            {
              ast.Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Expression e1 = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Expression e2 = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.BinaryExpression(e1, e2, op);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= name 
            {
              ast.Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Name n = (ast.Name)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // transitions ::= 
            {
              List<ast.Transition> RESULT =null;
		
        RESULT = new ArrayList<ast.Transition>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transitions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // transitions ::= transitions transition 
            {
              List<ast.Transition> RESULT =null;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Transition> tlist = (List<ast.Transition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Transition t = (ast.Transition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = tlist;
      for(ast.Transition tr : tlist) {
        if(tr.name.equals(t.name)) {
          throw new Exception("Duplicate transition name " + t.name);
        }
      }
      RESULT.add(t);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transitions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // trigger ::= 
            {
              String RESULT =null;
		
      RESULT = "eNone";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trigger",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // trigger ::= TRIGGER COLON IDENTIFIER SEMICOLON 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trigger",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // transition ::= TRANSITION IDENTIFIER LBRACE SRC COLON name SEMICOLON DEST COLON name SEMICOLON trigger GUARD COLON expr SEMICOLON ACTION COLON statement RBRACE 
            {
              ast.Transition RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-18)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		ast.Name src = (ast.Name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		ast.Name des = (ast.Name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ast.Expression g = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Statement a = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.Transition(id, src, des, t, g, a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transition",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // states ::= 
            {
              List<ast.State> RESULT =null;
		
       RESULT = new ArrayList<ast.State>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("states",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // states ::= states state 
            {
              List<ast.State> RESULT =null;
		int slistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.State> slist = (List<ast.State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.State s = (ast.State)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = slist;
      for(ast.State st : slist) {
        if(st.name.equals(s.name)) {
          throw new Exception("Duplicate state name " + s.name);
        }
      }
      RESULT.add(s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("states",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exit_clause ::= 
            {
              ast.Statement RESULT =null;
		
      RESULT = new ast.StatementList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_clause",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exit_clause ::= EXIT COLON statement 
            {
              ast.Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Statement a = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_clause",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // entry_clause ::= 
            {
              ast.Statement RESULT =null;
		
      RESULT = new ast.StatementList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entry_clause",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // entry_clause ::= ENTRY COLON statement 
            {
              ast.Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Statement a = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entry_clause",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // state ::= STATE IDENTIFIER LBRACE decl_list entry_clause exit_clause states transitions RBRACE 
            {
              ast.State RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.Statement en = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Statement ex = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ast.State> st = (List<ast.State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Transition> tr = (List<ast.Transition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.State(id, dlist, en, ex, st, tr,  new ast.BooleanConstant(false));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // state ::= SHELL IDENTIFIER LBRACE decl_list entry_clause exit_clause states RBRACE 
            {
              ast.State RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Statement en = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Statement ex = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.State> st = (List<ast.State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.Shell(id, dlist, en, ex, st,  new ast.BooleanConstant(true));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // state ::= SHELL IDENTIFIER LBRACE HISTORY decl_list entry_clause exit_clause states RBRACE 
            {
              ast.State RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Statement en = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Statement ex = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.State> st = (List<ast.State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.Shell(id, dlist, en, ex, st,  new ast.BooleanConstant(true));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // state ::= STATE IDENTIFIER LBRACE HISTORY decl_list entry_clause exit_clause states transitions RBRACE 
            {
              ast.State RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.Statement en = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Statement ex = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ast.State> st = (List<ast.State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Transition> tr = (List<ast.Transition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.State(id, dlist, en, ex, st, tr,  new ast.BooleanConstant(true));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcs ::= 
            {
              List<ast.FunctionDeclaration> RESULT =null;
		
      RESULT = new ArrayList<ast.FunctionDeclaration>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcs",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcs ::= funcs funcdecl 
            {
              List<ast.FunctionDeclaration> RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.FunctionDeclaration> decs = (List<ast.FunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.FunctionDeclaration dec = (ast.FunctionDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = decs;
    for(ast.FunctionDeclaration f : decs) {
      if(f.name.equals(dec.name)) {
        throw new Exception("Duplicate function name " + dec.name);
      }
    }

    RESULT.add(dec);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcs",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcdecls ::= 
            {
              List<ast.FunctionDeclaration> RESULT =null;
		
    RESULT = new ArrayList<ast.FunctionDeclaration>();
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdecls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcdecls ::= FUNCTIONS LBRACE funcs RBRACE 
            {
              List<ast.FunctionDeclaration> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.FunctionDeclaration> fs = (List<ast.FunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = fs;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdecls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // non_empty_param_list ::= normal_decl 
            {
              ast.DeclarationList RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Declaration param = (ast.Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new ast.DeclarationList();
    RESULT.add(param);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_param_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // non_empty_param_list ::= non_empty_param_list COMMA normal_decl 
            {
              ast.DeclarationList RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.DeclarationList params = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Declaration param = (ast.Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = params;
    if(!RESULT.add(param)) {
      throw new Exception("Duplication parameter name '" + param.vname + "' function parameter list.");
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_param_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param_list ::= 
            {
              ast.DeclarationList RESULT =null;
		
    RESULT = new ast.DeclarationList();
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param_list ::= non_empty_param_list 
            {
              ast.DeclarationList RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.DeclarationList params = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = params;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcdecl ::= IDENTIFIER LTRI tparams RTRI LPAREN param_list RPAREN COLON typename SEMICOLON 
            {
              ast.FunctionDeclaration RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int typarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int typarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<String> typars = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.DeclarationList params = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.TypeName tname = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new ast.FunctionDeclaration(fname, typars, tname, params);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcdecl ::= IDENTIFIER LPAREN param_list RPAREN COLON typename SEMICOLON 
            {
              ast.FunctionDeclaration RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.DeclarationList params = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.TypeName tname = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new ast.FunctionDeclaration(fname, tname, params);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // events ::= 
            {
              List<String> RESULT =null;
		
       RESULT = new ArrayList<String>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("events",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // events ::= events IDENTIFIER SEMICOLON 
            {
              List<String> RESULT =null;
		int eventlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eventlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> eventlist = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = eventlist;
      for(String event : eventlist) {
        if(event.equals(e)) {
          throw new Exception("Duplicate event" + e);
        }
      }
      RESULT.add(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("events",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // eventlist ::= 
            {
              List<String> RESULT =null;
		
      RESULT = new ArrayList<String>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eventlist",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // eventlist ::= EVENTS LBRACE events RBRACE 
            {
              List<String> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> el = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = el;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eventlist",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // struct ::= STRUCT LTRI tparams RTRI IDENTIFIER LBRACE decl_list RBRACE 
            {
              ast.Struct RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.Struct(id, dlist, params);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // struct ::= STRUCT IDENTIFIER LBRACE decl_list RBRACE 
            {
              ast.Struct RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.Struct(id, dlist, new ArrayList<String>());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ne_tparams ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new ArrayList<String>();
    RESULT.add(param);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ne_tparams",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ne_tparams ::= ne_tparams COMMA IDENTIFIER 
            {
              List<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = params;
    RESULT.add(param);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ne_tparams",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tparams ::= 
            {
              List<String> RESULT =null;
		
    RESULT = new ArrayList<String>();
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tparams",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tparams ::= ne_tparams 
            {
              List<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = params;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tparams",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // polytypedecl ::= TYPE IDENTIFIER LTRI tparams RTRI SEMICOLON 
            {
              ast.Type RESULT =null;
		int tnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String tname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = new ast.BasicType(tname, params);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("polytypedecl",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // typedecl ::= struct 
            {
              ast.Type RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Struct str = (ast.Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = str;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecl",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // typedecl ::= polytypedecl 
            {
              ast.Type RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Type decls = (ast.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = decls;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecl",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // typedecls ::= 
            {
              List<ast.Type> RESULT =null;
		
      RESULT = new ArrayList<ast.Type>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecls",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // typedecls ::= typedecls typedecl 
            {
              List<ast.Type> RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Type> decls = (List<ast.Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Type decl = (ast.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = decls;
      RESULT.add(decl);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecls",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typelist ::= 
            {
              List<ast.Type> RESULT =null;
		
    RESULT = new ArrayList<ast.Type>();
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // typelist ::= TYPES LBRACE typedecls RBRACE 
            {
              List<ast.Type> RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Type> decls = (List<ast.Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = decls;    
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statechart ::= STATECHART IDENTIFIER LBRACE HISTORY typelist eventlist decl_list entry_clause exit_clause funcdecls states transitions RBRACE 
            {
              ast.Statechart RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		List<ast.Type> tlist = (List<ast.Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<String> el = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ast.Statement en = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.Statement ex = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fdeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fdeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<ast.FunctionDeclaration> fdecls = (List<ast.FunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ast.State> st = (List<ast.State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Transition> tr = (List<ast.Transition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.Statechart(id, tlist, el, dlist, en, ex, fdecls, st, tr,  new ast.BooleanConstant(true));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statechart",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statechart ::= STATECHART IDENTIFIER LBRACE typelist eventlist decl_list entry_clause exit_clause funcdecls states transitions RBRACE 
            {
              ast.Statechart RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		List<ast.Type> tlist = (List<ast.Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<String> el = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ast.Statement en = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.Statement ex = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fdeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fdeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<ast.FunctionDeclaration> fdecls = (List<ast.FunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ast.State> st = (List<ast.State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Transition> tr = (List<ast.Transition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.Statechart(id, tlist, el, dlist, en, ex, fdecls, st, tr,  new ast.BooleanConstant(false));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statechart",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // name ::= name DOT IDENTIFIER 
            {
              ast.Name RESULT =null;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Name idlist = (ast.Name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = idlist;
      RESULT.add(id);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // name ::= IDENTIFIER 
            {
              ast.Name RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.Name(id);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statechart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Statechart start_val = (ast.Statechart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

