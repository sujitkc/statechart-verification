statechart sc{
   events {
	e;
	Next;
	No_event;
	Error;
	SetAccelIn;
	SetAccelOut;
	ResumeCoastIn;
	ResumeCoastOut;
	Cancel;
  }

	Set_Brake:int:local;
	  CA_Enabled : boolean : local;
	Set_Throttle:int:local;
	Set_SteerOut:int:local;
  	CC_Enabled : boolean : local;
  	CC_Engaged : boolean : local;
 	CA_HVI : int : local;
  	EVA_Enabled : boolean : local;
  	EVA_HVI : int : local;
	LG_Warning:boolean:local;
  	Warning :int: local;
  	AccelPedal :int: local;
    BrakePedal:int:local;
 PSC_Enabled : boolean : local;
  PSC_HVI : int : local;
  	minusten:int:local;
  	BoolTRUE : boolean : local;
  	BoolFALSE : boolean : local;
  	minusone: int :local;
    TargetSpeed : int : local;
  	FollowDist : int : local;
  	Speed: int: local;
  RA_Enabled : boolean : local;
 RA_HVI : int : local;
  RA_Warning:int:local;
   LG_Enabled : boolean : local;
	SteerIn:int:local;
 	PRNDL_In:int:local;
	Siren :boolean : local;
	set_Throttle :int:local;
    	TurnSignal:boolean:local;
    	set_SteerOut:int:local;
    	  PA_Enabled : boolean : local;
    	    PA_HVI : int : local;
	entry:{
        BoolTRUE:=true;
        BoolFALSE:=false;
        CC_Enabled:=true;  
        CC_Engaged:=true;  
          CA_Enabled:=true;
          Speed:=0;
    EVA_Enabled:=true;  
      RA_Enabled:=true;  
	minusone:=0-1;
	minusten:=0-10;
PSC_Enabled:=true;
PA_Enabled:=true;
Siren:=BoolTRUE;
 LG_Enabled:=true;  
 SteerIn:=0;
 SteerIn:=0;
	TurnSignal:=BoolFALSE;
	  PRNDL_In:=input<|int|>();
    }
    exit:{}
    functions {
  input<|int|>() : int;
  }

  shell allcomp
  {
  	
    entry:{}
    exit:{}
    
    state  ParkingSpaceCentering{
  
 
  state pscDisabled{
   entry: {}
   exit : {}
  }
  state pscOverride{
   entry: {}
   exit : {}
  }
  state pscFail{
   entry: {}
   exit : {}
  }
  state pscEnabled{

   //Speed:int:local;
   //PRNDL_In:int:local;
   
   
   entry: {
     
   }
   exit : {}
   state pscDisengaged{
     entry: {}
     exit : {}
   }
   state pscEngaged{
    
	 Set_Brake:int:local;
	 Set_SteerOut:int:local;
	 Set_Throttle:int:local;
	 
	
	 RightLine:int:local;
	 LeftLine:int:local;
	 FrontLine:int:local;
	 
	 entry: {
		
	 }
     exit : {}
	 
	 state pscStraight{
	 entry: {}
     exit : {}
	 }
	 
	 state pscMoveLeft{
	 entry: {}
     exit : {}
	 }
	 
	 state pscMoveRight{
	 entry: {}
     exit : {}
	}
	
	transition psct16{
    source: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscEngaged.pscStraight;
    destination: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscEngaged.pscMoveRight;
    trigger: e;
    guard:((RightLine-LeftLine)>5);
    action:{Set_SteerOut:=1;Set_Throttle:=20;}
    }
	
	transition psct20{
    source: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscEngaged.pscMoveRight;
    destination: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscEngaged.pscStraight;
    trigger: e;
    guard:((RightLine-LeftLine)<5);
    action:{Set_Throttle:=20;}
    }
	
	transition psct19{
    source: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscEngaged.pscMoveLeft;
    destination: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscEngaged.pscStraight;
    trigger: e;
    guard:((LeftLine-RightLine)<5);
    action:{Set_Throttle:=20;}
    }
	
	transition psct15{
    source: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscEngaged.pscStraight;
    destination: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscEngaged.pscMoveLeft;
    trigger: e;
    guard:((LeftLine-RightLine)>5);
    action:{Set_SteerOut:=minusone;Set_Throttle:=20;}
    }
	
	
	
   }
   state pscHalt{
	 entry: {}
     exit : {}
   }
   transition psct29{
    source: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscDisengaged;
    destination: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscEngaged;
    trigger: e;
    guard:(Speed>0)&&(Speed<=5)&&(PRNDL_In=3);
    action:{}
  }
   
   transition psct21{
    source: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscEngaged;
    destination: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscDisengaged;
    trigger: e;
    guard:(Speed=0)||(Speed>5)||(PRNDL_In!=3);
    action:{}
  }
    transition psct17{
    source: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscEngaged;
    destination: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscHalt;
    trigger: e;
    guard:(FrontLine<5)&&((LeftLine-RightLine)<5)&&((RightLine-LeftLine)<5);
    action:{Set_Brake:=30;}
  }
   transition psct27{
    source: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscHalt;
    destination: sc.allcomp.ParkingSpaceCentering.pscEnabled.pscDisengaged;
    trigger: e;
    guard:(Speed=0);
    action:{}
  }
   
   
   
  }
  transition psct13{
  source: sc.allcomp.ParkingSpaceCentering.pscDisabled;
  destination: sc.allcomp.ParkingSpaceCentering.pscEnabled;
  trigger: e;
  guard:(PSC_Enabled=BoolTRUE);
  action:{PSC_HVI:=1;}
  }
  
  transition psct14{
  source: sc.allcomp.ParkingSpaceCentering.pscEnabled;
  destination: sc.allcomp.ParkingSpaceCentering.pscDisabled;
  trigger: e;
  guard:(PSC_Enabled!=BoolTRUE);
  action:{PSC_HVI:=0;}
  }
   
  transition psct22{
  source: sc.allcomp.ParkingSpaceCentering.pscOverride;
  destination: sc.allcomp.ParkingSpaceCentering.pscDisabled;
  trigger: e;
  guard:(PSC_Enabled!=BoolTRUE);
  action:{PSC_HVI:=0;}
  }
  
  transition psct24{
  source: sc.allcomp.ParkingSpaceCentering.pscEnabled;
  destination: sc.allcomp.ParkingSpaceCentering.pscOverride;
  trigger: e;
  guard:(BrakePedal>0)||(AccelPedal>0);
  action:{PSC_HVI:=3;}
  }
  
  transition psct28{
  source: sc.allcomp.ParkingSpaceCentering.pscOverride;
  destination: sc.allcomp.ParkingSpaceCentering.pscEnabled;
  trigger: e;
  guard:(BrakePedal=0)&&(AccelPedal=0);
  action:{PSC_HVI:=1;}
  }
  
  transition psct30{
  source: sc.allcomp.ParkingSpaceCentering.pscOverride;
  destination: sc.allcomp.ParkingSpaceCentering.pscFail;
  trigger: Error;
  guard:true;
  action:{PSC_HVI:=4;}
  }
  
  transition psct25{
  source: sc.allcomp.ParkingSpaceCentering.pscEnabled;
  destination: sc.allcomp.ParkingSpaceCentering.pscFail;
  trigger: Error;
  guard:true;
  action:{PSC_HVI:=4;}
  }
  
}
     state CollisionAvoidance{
        entry:{}
        exit:{}   
          state caDisabled{
   entry: {}
   exit : {}
  }
  state caOverride{
   entry: {}
   exit : {}
  }
  state caFail{
   entry: {}
   exit : {}
  }
  state caEnabled{
   //BreakPedal:int:local;
   //Speed:int:local;
   //PRNDL_In:int:local;

   
   entry: {
    //Speed:=input<|int|>();

   }
   exit : {}
   state caDisengaged{
     entry: {}
     exit : {}
   }
   state caEngaged{
     ThreatCA:int:local;
	// Set_Brake:int:local;
	 
	 
	 entry: {

	 }
     exit : {}
	 
	 state caIdle{
	 entry: {}
     exit : {}
	 }
	 
	 state caWarn{
	 entry: {}
     exit : {}
	 }
	 
	 state caAvoid{
	 entry: {}
     exit : {}
	}
	
	state caMitigate{
	 entry: {}
     exit : {}
    }
	transition cat19{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caIdle;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caWarn;
    trigger: e;
    guard:(ThreatCA=1);
    action:{Warning:=1;}
    }
	
	transition cat20{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caWarn;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caIdle;
    trigger: e;
    guard:(ThreatCA=0);
    action:{Warning:=0;}
    }
	
	transition cat21{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caAvoid;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caWarn;
    trigger: e;
    guard:(ThreatCA=1);
    action:{Warning:=1;}
    }
	
	transition cat22{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caWarn;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caAvoid;
    trigger: e;
    guard:(ThreatCA=2);
    action:{Warning:=2; Set_Brake:=30;}
    }
	
	transition cat23{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caAvoid;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caIdle;
    trigger: e;
    guard:(ThreatCA=0);
    action:{Warning:=0;}
    }
	
	transition cat33{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caIdle;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caAvoid;
    trigger: e;
    guard:(ThreatCA=2);
    action:{Warning:=2;Set_Brake:=30;}
    }
	
	transition cat34{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caMitigate;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caIdle;
    trigger: e;
    guard:(ThreatCA=0);
    action:{Warning:=0;}
    }
	
	transition cat35{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caIdle;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caMitigate;
    trigger: e;
    guard:(ThreatCA=3);
    action:{Warning:=3; Set_Brake:=80;}
    }
	
	transition cat29{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caWarn;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caMitigate;
    trigger: e;
    guard:(ThreatCA=3);
    action:{Warning:=3;Set_Brake:=80;}
    }
	
	transition cat31{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caMitigate;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caWarn;
    trigger: e;
    guard:(ThreatCA=1);
    action:{Warning:=1;}
    }
	
	transition cat30{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caAvoid;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caMitigate;
    trigger: e;
    guard:(ThreatCA=3);
    action:{Warning:=3;Set_Brake:=80;}
    }
	
	transition cat32{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caMitigate;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged.caAvoid;
    trigger: e;
    guard:(ThreatCA=2);
    action:{Warning:=2;Set_Brake:=30;}
    }
	
   }
   state caHalt{
	 entry: {}
     exit : {}
   }
   transition cat16{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caDisengaged;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged;
    trigger: e;
    guard:(Speed>25)&&(PRNDL_In=3);
    action:{CA_HVI:=2;}
  }
   
   transition cat17{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caDisengaged;
    trigger: e;
    guard:((Speed>0)&&(Speed<=25))||(PRNDL_In!=3);
    action:{CA_HVI:=1;Warning:=0;}
  }
   
   transition cat24{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caHalt;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caDisengaged;
    trigger: e;
    guard:(BrakePedal>10);
    action:{CA_HVI:=1;Warning:=0;}
  }
   
   transition cat25{
    source:sc.allcomp.CollisionAvoidance.caEnabled.caEngaged;
    destination:sc.allcomp.CollisionAvoidance.caEnabled.caHalt;
    trigger: e;
    guard:(Speed=1);
    action:{CA_HVI:=1;Warning:=4;}
  }
   
  }
  transition cat14{
  source:sc.allcomp.CollisionAvoidance.caDisabled;
  destination:sc.allcomp.CollisionAvoidance.caEnabled;
  trigger: e;
  guard:(CA_Enabled=BoolTRUE);
  action:{CA_HVI:=1;}
  }
  
  transition cat15{
  source:sc.allcomp.CollisionAvoidance.caEnabled;
  destination:sc.allcomp.CollisionAvoidance.caDisabled;
  trigger: e;
  guard:(CA_Enabled!=BoolTRUE);
  action:{CA_HVI:=0;Warning:=0;}
  }
   
  transition cat38{
  source:sc.allcomp.CollisionAvoidance.caOverride;
  destination:sc.allcomp.CollisionAvoidance.caDisabled;
  trigger: e;
  guard:(CA_Enabled!=BoolTRUE);
  action:{CA_HVI:=0;Warning:=0;}
  }
  
  transition cat36{
  source:sc.allcomp.CollisionAvoidance.caEnabled;
  destination:sc.allcomp.CollisionAvoidance.caOverride;
  trigger: e;
  guard:(AccelPedal>=35);
  action:{CA_HVI:=4;Warning:=0;}
  }
  
  transition cat37{
  source:sc.allcomp.CollisionAvoidance.caOverride;
  destination:sc.allcomp.CollisionAvoidance.caEnabled;
  trigger: e;
  guard:(AccelPedal<35);
  action:{CA_HVI:=1;}
  }
  
 /* transition t39{
  source:sc.allcomp.CollisionAvoidance.caOverride;
  destination:sc.allcomp.CollisionAvoidance.caFail;
  trigger: Error;
  guard:true;
  action:{CA_HVI:=3;}
  }*/
  
  /*transition t27{
  source:sc.allcomp.CollisionAvoidance.caEnabled;
  destination:sc.allcomp.CollisionAvoidance.caFail;
  trigger: Error;
  guard:true;
  action:{CA_HVI:=3;Warning:=0;}
  }*/
 
    }
       state ReversingAssistance{
     state Disabled{
   entry: {}
   exit : {}
  }
  state Override{
   entry: {}
   exit : {}
  }
  state Fail{
   entry: {}
   exit : {}
  }
  state Enabled{
   //BrakePedal:int:local;
  // Speed:int:local;
   //PRNDL_In:int:local;
   
   
   entry: {
     
 }
   exit : {}
   state Disengaged{
     entry: {}
     exit : {}
   }
   state Engaged{
     
	// Set_Brake:int:local;
	 ObstacleZone:int:local;

	 entry: {

	 }
     exit : {}
	 
	 state Idle{
	 entry: {}
     exit : {}
	 }
	 
	 state Warn{
	 entry: {}
     exit : {}
	 }
	 
	 state Assist{
	 entry: {}
     exit : {}
	}
	
	
	transition rat23{
    source: sc.allcomp.ReversingAssistance.Enabled.Engaged.Idle;
    destination: sc.allcomp.ReversingAssistance.Enabled.Engaged.Warn;
    trigger: e;
    guard:(ObstacleZone=1);
    action:{RA_Warning:=1;}
    }
	
	transition rat24{
    source: sc.allcomp.ReversingAssistance.Enabled.Engaged.Warn;
    destination: sc.allcomp.ReversingAssistance.Enabled.Engaged.Idle;
    trigger: e;
    guard:(ObstacleZone=0);
    action:{RA_Warning:=0;}
    }
    
    transition rat27{
    source: sc.allcomp.ReversingAssistance.Enabled.Engaged.Warn;
    destination: sc.allcomp.ReversingAssistance.Enabled.Engaged.Assist;
    trigger: e;
    guard:(ObstacleZone=2);
    action:{RA_Warning:=2;Set_Brake:=60;}
    }
    transition rat28{
    source: sc.allcomp.ReversingAssistance.Enabled.Engaged.Assist;
    destination: sc.allcomp.ReversingAssistance.Enabled.Engaged.Warn;
    trigger: e;
    guard:(ObstacleZone=1);
    action:{RA_Warning:=1;}
    }
    transition rat29{
    source: sc.allcomp.ReversingAssistance.Enabled.Engaged.Idle;
    destination: sc.allcomp.ReversingAssistance.Enabled.Engaged.Assist;
    trigger: e;
    guard:(ObstacleZone=2);
    action:{RA_Warning:=2;Set_Brake:=60;}
    }
    transition rat30{
    source: sc.allcomp.ReversingAssistance.Enabled.Engaged.Assist;
    destination: sc.allcomp.ReversingAssistance.Enabled.Engaged.Idle;
    trigger: e;
    guard:(ObstacleZone=0);
    action:{RA_Warning:=0;}
    }
    
	
   }
   state Hold{
   	entry:{}
   	exit:{}
   }
   
   transition rat22{
    source: sc.allcomp.ReversingAssistance.Enabled.Engaged;
    destination: sc.allcomp.ReversingAssistance.Enabled.Disengaged;
    trigger: e;
    guard:((Speed>0)&&(Speed<10))||(Speed>25)||(PRNDL_In!=1);
    action:{RA_HVI:=1;RA_Warning:=0;}
  }
   
   transition rat21{
    source: sc.allcomp.ReversingAssistance.Enabled.Disengaged;
    destination: sc.allcomp.ReversingAssistance.Enabled.Engaged;
    trigger: e;
    guard:(Speed>=10)&&(Speed<=25)&&(PRNDL_In=1);
    action:{RA_HVI:=2;}
  }
    transition rat25{
    source: sc.allcomp.ReversingAssistance.Enabled.Engaged;
    destination: sc.allcomp.ReversingAssistance.Enabled.Hold;
    trigger: e;
    guard:(Speed=0);
    action:{RA_Warning:=3;}
  }
  transition rat26{
    source: sc.allcomp.ReversingAssistance.Enabled.Hold;
    destination: sc.allcomp.ReversingAssistance.Enabled.Disengaged;
    trigger: e;
    guard:(BrakePedal>20);
    action:{RA_HVI:=1;RA_Warning:=0;}
  }
   
  }
  transition rat13{
  source: sc.allcomp.ReversingAssistance.Disabled;
  destination: sc.allcomp.ReversingAssistance.Enabled;
  trigger: e;
  guard:(RA_Enabled=BoolTRUE);
  action:{RA_HVI:=1;}
  }
  
  transition rat14{
  source: sc.allcomp.ReversingAssistance.Enabled;
  destination: sc.allcomp.ReversingAssistance.Disabled;
  trigger: e;
  guard:(RA_Enabled!=BoolTRUE);
  action:{RA_HVI:=0;RA_Warning:=0;}
  }
   
  transition rat16{
  source: sc.allcomp.ReversingAssistance.Override;
  destination: sc.allcomp.ReversingAssistance.Disabled;
  trigger: e;
  guard:(RA_Enabled!=BoolTRUE);
  action:{RA_HVI:=0;RA_Warning:=0;}
  }
  
  transition rat19{
  source: sc.allcomp.ReversingAssistance.Enabled;
  destination: sc.allcomp.ReversingAssistance.Override;
  trigger: e;
  guard:(AccelPedal>=35);
  action:{RA_HVI:=4;RA_Warning:=0;}
  }
  
  transition rat15{
  source: sc.allcomp.ReversingAssistance.Override;
  destination: sc.allcomp.ReversingAssistance.Enabled;
  trigger: e;
  guard:(AccelPedal<35);
  action:{RA_HVI:=1;}
  }
  
  transition rat32{
  source: sc.allcomp.ReversingAssistance.Override;
  destination: sc.allcomp.ReversingAssistance.Fail;
  trigger: Error;
  guard:true;
  action:{RA_HVI:=3;RA_Warning:=0;}
  }
  
  transition rat18{
  source: sc.allcomp.ReversingAssistance.Enabled;
  destination: sc.allcomp.ReversingAssistance.Fail;
  trigger: Error;
  guard:true;
  action:{RA_HVI:=3;RA_Warning:=0;}
  }
    }
   state LaneGuide{
    /*	state Fail{
		entry:{}
		exit:{}
	}*/
	state Disabled{
		entry:{}
		exit:{}
	}
	state Enabled{
		/*PRNDL_In:int:local;
		Speed: int: local;
		SteerIn:int:local;
		BrakePedal:int:local;
		TurnSignal:boolean:local;*/
		
		entry:{}
		exit:{}
			state Disengaged{
				entry:{}
				exit:{}
			}
			state Override{
				entry:{}
				exit:{}
			}
			state Engaged{
				LGMode:int:local;
				//set_SteerOut:int:local;
				LaneDrift:int:local;
				
				entry:{
					LGMode:=input<|int|>();
					LaneDrift:=input<|int|>();
				}
				exit:{}
				state WarnLeft{
					entry:{}
					exit:{}
				}
				state Idle{
					entry:{}
					exit:{}
				}
				state AssistLeft{
					entry:{}
					exit:{}
				}
				state WarnRight{
					entry:{}
					exit:{}
				}
				state AssistRight{
					entry:{}
					exit:{}
				}
				transition lgt16{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.Idle;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.WarnLeft;
					trigger: e;
					guard:(LaneDrift<minusten)&&(LGMode=0); //LaneDrift<-10
					action:{LG_Warning:=BoolTRUE;}
				}	
				transition lgt17{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.WarnLeft;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.Idle;
					trigger: e;
					guard:(LaneDrift>minusten); //LaneDrift>-10
					action:{LG_Warning:=BoolFALSE;}
				}
				transition lgt20{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.WarnLeft;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.AssistLeft;
					trigger: e;
					guard:(LGMode=1); 
					action:{LG_Warning:=BoolFALSE;set_SteerOut:=minusone;} 
				}
				transition lgt19{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.AssistLeft;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.WarnLeft;
					trigger: e;
					guard:(LGMode=0); 
					action:{LG_Warning:=BoolTRUE;} 
				}
				transition lgt21{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.AssistLeft;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.Idle;
					trigger: e;
					guard:(LaneDrift>minusten); //LaneDrift>-10
					action:{LG_Warning:=BoolFALSE;}
				}
				transition lgt22{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.Idle;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.AssistLeft;
					trigger: e;
					guard:(LaneDrift<minusten)&&(LGMode=1); //LaneDrift<-10
					action:{LG_Warning:=BoolFALSE;set_SteerOut:=minusone;} 
				}
				transition lgt23{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.Idle;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.WarnRight;
					trigger: e;
					guard:(LaneDrift>10)&&(LGMode=0); 
					action:{LG_Warning:=BoolTRUE;}
				}
				transition lgt24{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.WarnRight;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.Idle;
					trigger: e;
					guard:(LaneDrift<10); 
					action:{LG_Warning:=BoolFALSE;}
				}
				transition lgt25{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.WarnRight;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.AssistRight;
					trigger: e;
					guard:(LGMode=1); 
					action:{LG_Warning:=BoolTRUE;set_SteerOut:=1;}
				}
				transition lgt26{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.AssistRight;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.WarnRight;
					trigger: e;
					guard:(LGMode=0); 
					action:{LG_Warning:=BoolTRUE;}
				}
				transition lgt27{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.AssistRight;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.Idle;
					trigger: e;
					guard:(LaneDrift<10); 
					action:{LG_Warning:=BoolFALSE;}
				}
				transition lgt28{
					source: sc.allcomp.LaneGuide.Enabled.Engaged.Idle;
					destination: sc.allcomp.LaneGuide.Enabled.Engaged.AssistRight;
					trigger: e;
					guard:(LaneDrift>10)&&(LGMode=1); 
					action:{LG_Warning:=BoolFALSE;set_SteerOut:=1;}
				}
				
			}
			transition lgt35{
				source: sc.allcomp.LaneGuide.Enabled.Disengaged;
				destination: sc.allcomp.LaneGuide.Enabled.Engaged;
				trigger: e;
				guard:(Speed<40)||(PRNDL_In!=3);
				action:{LG_Warning:=BoolFALSE;}
			}
			transition lgt34{
				source: sc.allcomp.LaneGuide.Enabled.Disengaged;
				destination: sc.allcomp.LaneGuide.Enabled.Engaged;
				trigger: e;
				guard:(Speed>=40)&&(PRNDL_In=3);
				action:{}
			}
			transition lgt29{
				source: sc.allcomp.LaneGuide.Enabled.Override;
				destination: sc.allcomp.LaneGuide.Enabled.Disengaged;
				trigger: e;
				guard:(SteerIn=0)&&(TurnSignal=BoolFALSE)&&(BrakePedal=0);
				action:{}
			}
			transition lgt30{
				source: sc.allcomp.LaneGuide.Enabled.Engaged;
				destination: sc.allcomp.LaneGuide.Enabled.Override;
				trigger: e;
				guard:(SteerIn>10)||(SteerIn<minusten)||(TurnSignal=BoolTRUE)||(BrakePedal>0); // SteerIn<-10
				action:{LG_Warning:=BoolFALSE;}
			}
			
			
	}
	transition lgt14{
		source: sc.allcomp.LaneGuide.Disabled;
		destination: sc.allcomp.LaneGuide.Enabled;
		trigger: e;
		guard:(LG_Enabled=BoolTRUE);
		action:{}
	}
	transition lgt15{
		source: sc.allcomp.LaneGuide.Enabled;
		destination: sc.allcomp.LaneGuide.Disabled;
		trigger: e;
		guard:(LG_Enabled=BoolFALSE);
		action:{LG_Warning:=BoolFALSE;}
	}
	/*transition lgt31{
		source: sc.allcomp.LaneGuide.Fail;
		destination: sc.allcomp.LaneGuide.Enabled;
		trigger: Error;
		guard:(true);
		action:{LG_Warning:=BoolFALSE;}
	}*/
    }
    state ParkAssist{
        entry:{}
        exit:{}
    /*    	state paFail{
		entry:{}
		exit:{}
	}*/
	state paDisabled{
		entry:{}
		exit:{}
	}
	state paEnabled{
		//PRNDL_In:int:local;

		Accepted:boolean:local;
		SpaceFound:boolean:local;
		/*set_Throttle:int:local;
		set_SteerOut:int:local;
		SteerIn:int:local;
		AccelPedal:int:local;*/
		entry:{}
		exit:{}
			state paIdle{
				entry:{}
				exit:{}
			}
			state paSearching{
				entry:{}
				exit:{}
			}
			state paPrompting{
				entry:{}
				exit:{}
			}
			state paOverride{
				entry:{}
				exit:{}
			}
			state paEngaged{
				//set_Brake:int:local;
	
				entry:{}
				exit:{}
				state paSwivelIn{
					entry:{}
					exit:{}
				}
				state paSwivelOut{
					entry:{}
					exit:{}
				}
				state paCenter{
					entry:{}
					exit:{}
				}
				state paStop1{
					entry:{}
					exit:{}
				}
				state paStop2{
					entry:{}
					exit:{}
				}
				transition pat30{
					source: sc.allcomp.ParkAssist.paEnabled.paEngaged.paSwivelIn;
					destination: sc.allcomp.ParkAssist.paEnabled.paEngaged.paStop1;
					trigger: Next;
					guard:(PRNDL_In=1)&&(Speed>0)&&(Speed<=5);
					action:{PA_HVI:=4;Set_Brake:=30;}
				}
				transition pat27{
					source: sc.allcomp.ParkAssist.paEnabled.paEngaged.paSwivelIn;
					destination: sc.allcomp.ParkAssist.paEnabled.paEngaged.paSwivelOut;
					trigger: Next;
					guard:(PRNDL_In=1)&&(Speed>0)&&(Speed<=5);
					action:{PA_HVI:=4;set_Throttle:=20;set_SteerOut:=minusone;} //set_SteerOut=-1
				}
				transition pat23{
					source: sc.allcomp.ParkAssist.paEnabled.paEngaged.paStop1;
					destination: sc.allcomp.ParkAssist.paEnabled.paEngaged.paCenter;
					trigger: Next;
					guard:(Speed=0);
					action:{PA_HVI:=4;set_Throttle:=20;}
				}
				transition pat19{
					source: sc.allcomp.ParkAssist.paEnabled.paEngaged.paCenter;
					destination: sc.allcomp.ParkAssist.paEnabled.paEngaged.paStop2;
					trigger: Next;
					guard:(PRNDL_In=3)&&(Speed>0)&&(Speed<=5);
					action:{PA_HVI:=4;Set_Brake:=30;}
				}
				
			}
			state paAbort{
					entry:{}
					exit:{}
			}
			transition pat21{
					source: sc.allcomp.ParkAssist.paEnabled.paIdle;
					destination: sc.allcomp.ParkAssist.paEnabled.paSearching;
					trigger: e;
					guard:(Speed>0) && (Speed<=10) && (PRNDL_In=3);
					action:{PA_HVI:=2;}
				}
			transition pat22{
					source: sc.allcomp.ParkAssist.paEnabled.paSearching;
					destination: sc.allcomp.ParkAssist.paEnabled.paIdle;
					trigger: e;
					guard:(Speed=0) || (Speed>0) || (PRNDL_In!=3);
					action:{PA_HVI:=1;}
				}
			transition pat24{
					source: sc.allcomp.ParkAssist.paEnabled.paSearching;
					destination: sc.allcomp.ParkAssist.paEnabled.paPrompting;
					trigger: e;
					guard:(SpaceFound=BoolTRUE);
					action:{PA_HVI:=3;}
				}
			transition pat25{
					source: sc.allcomp.ParkAssist.paEnabled.paPrompting;
					destination: sc.allcomp.ParkAssist.paEnabled.paSearching;
					trigger: e;
					guard:(SpaceFound=BoolFALSE)||(Accepted=BoolFALSE);
					action:{PA_HVI:=2;}
				}
			transition pat26{
					source: sc.allcomp.ParkAssist.paEnabled.paPrompting;
					destination: sc.allcomp.ParkAssist.paEnabled.paEngaged.paSwivelOut;
					trigger: e;
					guard:(Accepted=BoolTRUE)&&(Speed=0)&&(PRNDL_In=1);
					action:{PA_HVI:=4;set_Throttle:=20;set_SteerOut:=1;}
				}
			/*transition pat39{
					source: sc.allcomp.ParkAssist.paEnabled.paEngaged.paSwivelOut;
					destination: sc.allcomp.ParkAssist.paEnabled.paAbort;
					trigger: e;
					guard:(PRNDL_In!=1);
					action:{PA_HVI:=6;}
				}
			transition pat38{
					source: sc.allcomp.ParkAssist.paEnabled.paEngaged.paCenter;
					destination: sc.allcomp.ParkAssist.paEnabled.paAbort;
					trigger: e;
					guard:(PRNDL_In!=3);
					action:{PA_HVI:=6;}
				}
			transition pat37{
					source: sc.allcomp.ParkAssist.paEnabled.paEngaged.paSwivelIn;
					destination: sc.allcomp.ParkAssist.paEnabled.paAbort;
					trigger: e;
					guard:(PRNDL_In!=1);
					action:{PA_HVI:=6;}
				}
			transition pat30{
					source: sc.allcomp.ParkAssist.paEnabled.paEngaged;
					destination: sc.allcomp.ParkAssist.paEnabled.paAbort;
					trigger: e;
					guard:(SteerIn>0)||(AccelPedal>0);
					action:{PA_HVI:=6;}
				}
			transition pat36{
					source: sc.allcomp.ParkAssist.paEnabled.paOverride;
					destination: sc.allcomp.ParkAssist.paEnabled.paAbort;
					trigger: e;
					guard:(SteerIn>0)||(AccelPedal>0);
					action:{PA_HVI:=6;}
				}*/
	}
	
	transition pat29{
		source: sc.allcomp.ParkAssist.paDisabled;
		destination: sc.allcomp.ParkAssist.paEnabled;
		trigger: e;
		guard:(PA_Enabled=BoolTRUE);
		action:{PA_HVI:=1;}
	}
	transition pat20{
		source: sc.allcomp.ParkAssist.paDisabled;
		destination: sc.allcomp.ParkAssist.paEnabled;
		trigger: e;
		guard:(PA_Enabled=BoolFALSE);
		action:{PA_HVI:=0;}
	}
	transition pat33{
		source: sc.allcomp.ParkAssist.paDisabled;
		destination: sc.allcomp.ParkAssist.paEnabled;
		trigger: Error;
		guard:(true);
		action:{PA_HVI:=8;}
	}
	transition pat35{
		source: sc.allcomp.ParkAssist.paEnabled.paEngaged.paStop2;
		destination: sc.allcomp.ParkAssist.paDisabled;
		trigger: e;
		guard:(Speed=0);
		action:{PA_HVI:=5;}
	}
	}
  
	state LogicControl{
	entry:{
		CC_Engaged:=true;
		
	//	Speed:=input<|int|>();
	//	BrakePedal:=input<|int|>();
		TargetSpeed:=60;
		CC_Enabled:=true;
	}
	exit:{}
		state Disabled{
			entry:{}
			exit:{}
		}
		state Fail{
			entry:{}
			exit:{}
		}
		state Enabled{
		//	PRNDL_In:int:local;
			
			entry:{
				PRNDL_In:=3;
					PRNDL_In:=3;
			}
			exit:{}
			state Disengaged{
				entry:{}
				exit:{}
			}
			state Override{
				entry:{}
				exit:{}
			}
			state Engaged{
				//set_Throttle :int:local;
				
				
				entry:{
					
				}
				exit:{}
				state Coasting{
					entry:{}
					exit:{}
				}
				state Accelerating{
					entry:{}
					exit:{}
				}
				transition lct20{
					source: sc.allcomp.LogicControl.Enabled.Engaged.Coasting;
					destination: sc.allcomp.LogicControl.Enabled.Engaged.Accelerating;
					trigger: e;
					guard:(FollowDist>50) && (Speed<TargetSpeed);
					action:{set_Throttle:=TargetSpeed-Speed;}
				}
				transition lct21{
					source: sc.allcomp.LogicControl.Enabled.Engaged.Accelerating;
					destination: sc.allcomp.LogicControl.Enabled.Engaged.Coasting;
					trigger: e;
					guard:(FollowDist<=50) || (Speed>=TargetSpeed);
					action:{}
				}
			}
			transition lct18{
				source: sc.allcomp.LogicControl.Enabled.Disengaged;
				destination: sc.allcomp.LogicControl.Enabled.Engaged;
				trigger: SetAccelIn;
				guard:(Speed>=40) && (PRNDL_In=3);
				action:{CC_Engaged:=BoolTRUE;}
			}
			transition lct37{
				source: sc.allcomp.LogicControl.Enabled.Engaged;
				destination: sc.allcomp.LogicControl.Enabled.Disengaged;
				trigger: e;
				guard:(Speed<40) || (PRNDL_In!=3);
				action:{CC_Engaged:=BoolFALSE;}
			}
			transition lct19{
				source: sc.allcomp.LogicControl.Enabled.Engaged;
				destination: sc.allcomp.LogicControl.Enabled.Override;
				trigger: Cancel;
				guard:(true);
				action:{CC_Engaged:=BoolFALSE;}
			}
			transition lct24{
				source: sc.allcomp.LogicControl.Enabled.Engaged;
				destination: sc.allcomp.LogicControl.Enabled.Override;
				trigger: e;
				guard:(BrakePedal>0);
				action:{CC_Engaged:=BoolFALSE;}
			}
			transition lct25_1{
				source: sc.allcomp.LogicControl.Enabled.Override;
				destination: sc.allcomp.LogicControl.Enabled.Engaged;
				trigger: SetAccelIn;
				guard:(Speed>=40)&&(PRNDL_In=3);
				action:{CC_Engaged:=BoolTRUE;}
			}
			transition lct25_2{
				source: sc.allcomp.LogicControl.Enabled.Override;
				destination: sc.allcomp.LogicControl.Enabled.Engaged;
				trigger: ResumeCoastIn;
				guard:(Speed>=40)&&(PRNDL_In=3);
				action:{CC_Engaged:=BoolTRUE;}
			}
			
		}
		transition lct22{
				source: sc.allcomp.LogicControl.Disabled;
				destination: sc.allcomp.LogicControl.Enabled;
				trigger: e;
				guard:(CC_Enabled=BoolTRUE);
				action:{TargetSpeed:=0;}
		}
		transition lct23{
				source: sc.allcomp.LogicControl.Enabled;
				destination: sc.allcomp.LogicControl.Disabled;
				trigger: e;
				guard:(CC_Enabled=BoolFALSE);
				action:{TargetSpeed:=0;CC_Engaged:=BoolFALSE;}
		}
		transition lct26{
				source: sc.allcomp.LogicControl.Enabled;
				destination: sc.allcomp.LogicControl.Disabled;
				trigger: Error;
				guard:(true);
				action:{CC_Engaged:=BoolFALSE;}
		}
	}

    state SpeedSetting{
		entry:{ Speed:=0;}
		exit:{}
			
      state HoldSpeed{
				entry:{
         
          AccelPedal:=input<|int|>();
          BrakePedal:=input<|int|>();
        }
				exit:{}
			}
      state IncSpeed{
				entry:{
          AccelPedal:=input<|int|>();
          BrakePedal:=input<|int|>();
        }
				exit:{}
	}
			state DecSpeed{
				entry:{
          AccelPedal:=input<|int|>();
          BrakePedal:=input<|int|>();
        }
				exit:{}
			}
			
		transition sst27{
				source: sc.allcomp.SpeedSetting.DecSpeed;
				destination: sc.allcomp.SpeedSetting.HoldSpeed;
				trigger: e;
				guard:(BrakePedal>=0);
				action:{}
		}
		transition sst32{
				source: sc.allcomp.SpeedSetting.IncSpeed;
				destination: sc.allcomp.SpeedSetting.HoldSpeed;
				trigger: e;
				guard:(BrakePedal>=0);
				action:{}
		}
		
		transition sst31{
				source: sc.allcomp.SpeedSetting.HoldSpeed;
				destination: sc.allcomp.SpeedSetting.IncSpeed;
				trigger: e;
				guard:((AccelPedal>30) && (BrakePedal=0)); 
				action:{Speed:=Speed+1;} 

		}
		
		transition sst33{
				source: sc.allcomp.SpeedSetting.IncSpeed;
				destination: sc.allcomp.SpeedSetting.IncSpeed;
				trigger: e;
				guard:((BrakePedal=0)&&(Speed<100));
				action:{Speed:=Speed+1;}
		}
		transition sst34{
				source: sc.allcomp.SpeedSetting.DecSpeed;
				destination: sc.allcomp.SpeedSetting.DecSpeed;
				trigger: e;
				guard:((BrakePedal>0)&&(Speed>0));
				action:{Speed:=Speed-1;}
		}
		transition sst35{
				source: sc.allcomp.SpeedSetting.HoldSpeed;
				destination: sc.allcomp.SpeedSetting.DecSpeed;
				trigger: e;

       				guard:(BrakePedal>=0);
				action:{Speed:=Speed-1;}

		}
		
		
		
	}
	
	  state Sensor{
        entry:{}
        exit:{}
        state sense{
            entry:{
               // AccelPedal:=input<|int|>();
                    PRNDL_In:=input<|int|>();

            }
            exit:{}

        }
        transition sst35{
				source: sc.allcomp.Sensor.sense;
				destination: sc.allcomp.Sensor.sense;
				trigger: e;

       				guard:(true);
				action:{}

		}
    }
    
        state eva{
    
    	 state evaDisabled{
   entry: {}
   exit : {}
  }
  state evaOverride{
   entry: {}
   exit : {}
  }
  state evaFail{
   entry: {}
   exit : {}
  }
  state evaEnabled{
   //Speed:int:local;
   //PRNDL_In:int:local;
	// Siren :boolean : local;

   
   entry: {
    

 }
   exit : {}
   state evaDisengaged{
     entry: {}
     exit : {}
   }
   state evaEngaged{
     
	 //Set_Brake:int:local;
	 //Set_Throttle:int:local;
	 //Set_SteerOut:int:local;
  	 WayClear: boolean : local;
  	 DontStop: boolean : local;
  
	
	 
	 entry: {

	 }
     exit : {}
	 
	 state evaSlow{
	 entry: {}
     exit : {}
	 }
	 
	 state evaCoast{
	 entry: {}
     exit : {}
	 }
	 
	 state evaPullOver{
	 entry: {}
     exit : {}
	}
	
	
	transition evat24{
    source: sc.allcomp.eva.evaEnabled.evaEngaged.evaSlow;
    destination: sc.allcomp.eva.evaEnabled.evaEngaged.evaCoast;
    trigger: e;
    guard:(DontStop=BoolTRUE);
    action:{Set_Throttle:=35;}
    }
	
    transition evat23{
    source: sc.allcomp.eva.evaEnabled.evaEngaged.evaSlow;
    destination: sc.allcomp.eva.evaEnabled.evaEngaged.evaPullOver;
    trigger: e;
    guard:(DontStop!=BoolTRUE)&&(WayClear=BoolTRUE);
    action:{Set_Brake:=60;Set_SteerOut:=minusone;}
    }
    
    
    transition evat25{
    source: sc.allcomp.eva.evaEnabled.evaEngaged.evaCoast;
    destination: sc.allcomp.eva.evaEnabled.evaEngaged.evaSlow;
    trigger: e;
    guard:(DontStop=BoolFALSE)&&(WayClear=BoolFALSE);
    action:{Set_Brake:=30;}
    }
	
	transition evat26{
    source: sc.allcomp.eva.evaEnabled.evaEngaged.evaCoast;
    destination: sc.allcomp.eva.evaEnabled.evaEngaged.evaPullOver;
    trigger: e;
    guard:(DontStop!=BoolTRUE)&&(WayClear=BoolTRUE);
    action:{Set_Brake:=60;Set_SteerOut:=minusone;}
    }
    
     transition evat22{
    source: sc.allcomp.eva.evaEnabled.evaEngaged.evaPullOver;
    destination: sc.allcomp.eva.evaEnabled.evaEngaged.evaSlow;
    trigger: e;
    guard:(DontStop=BoolFALSE)&&(WayClear=BoolFALSE);
    action:{Set_Brake:=30;}
    }
	
	transition evat27{
    source: sc.allcomp.eva.evaEnabled.evaEngaged.evaPullOver;
    destination: sc.allcomp.eva.evaEnabled.evaEngaged.evaCoast;
    trigger: e;
    guard:(DontStop=BoolTRUE);
    action:{Set_Throttle:=35;}
    }
	
	
   }
   
   transition evat19{
    source: sc.allcomp.eva.evaEnabled.evaEngaged;
    destination: sc.allcomp.eva.evaEnabled.evaDisengaged;
    trigger: e;
    guard:(Siren=BoolFALSE)||(Speed=0)||(PRNDL_In!=3);
    action:{EVA_HVI:=1;}
  }
   
   transition evat20{
    source: sc.allcomp.eva.evaEnabled.evaDisengaged;
    destination: sc.allcomp.eva.evaEnabled.evaEngaged;
    trigger: e;
    guard:(Siren=BoolTRUE)&&(Speed>0)&&(PRNDL_In=3);
    action:{EVA_HVI:=1;}
  }
   
 
   
  }
  transition evat13{
  source: sc.allcomp.eva.evaDisabled;
  destination: sc.allcomp.eva.evaEnabled;
  trigger: e;
  guard:(EVA_Enabled=BoolTRUE);
  action:{EVA_HVI:=1;}
  }
  
  transition evat14{
  source: sc.allcomp.eva.evaEnabled;
  destination: sc.allcomp.eva.evaDisabled;
  trigger: e;
  guard:(EVA_Enabled!=BoolTRUE);
  action:{EVA_HVI:=0;}
  }
   
  transition evat16{
  source: sc.allcomp.eva.evaOverride;
  destination: sc.allcomp.eva.evaDisabled;
  trigger: e;
  guard:(EVA_Enabled!=BoolTRUE);
  action:{EVA_HVI:=0;}
  }
  
  transition evat17{
  source: sc.allcomp.eva.evaEnabled;
  destination: sc.allcomp.eva.evaOverride;
  trigger: e;
  guard:(BrakePedal!=0)||(AccelPedal>=30);
  action:{EVA_HVI:=2;}
  }
  
  transition evat18{
  source: sc.allcomp.eva.evaOverride;
  destination: sc.allcomp.eva.evaEnabled;
  trigger: e;
  guard:(BrakePedal=0)&&(AccelPedal<30);
  action:{EVA_HVI:=2;}
  }
  
  transition evat29{
  source: sc.allcomp.eva.evaOverride;
  destination: sc.allcomp.eva.evaFail;
  trigger: Error;
  guard:true;
  action:{EVA_HVI:=4;}
  }
  
  transition evat28{
  source: sc.allcomp.eva.evaEnabled;
  destination: sc.allcomp.eva.evaFail;
  trigger: Error;
  guard:true;
  action:{EVA_HVI:=4;}
  }
 
    }
  
    

  }
  
}
