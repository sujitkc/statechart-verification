// Evaluates the behavior for when History is maintained
//A.4 - https://cs.uwaterloo.ca/~aljuarez/Docs/Thesis_Juarez_Alma.pdf

statechart casense{

events {
	e;
	No_event;
	Error;
	e1;
	e2;
  }
  BoolTRUE : boolean : local;
  BoolFALSE : boolean : local;
  minusten:int:local;
  minusone:int:local;
  PRNDL_In:int:local;
  Speed: int: local;

  BrakePedal:int:local;
  set_SteerOut:int:local;
  CA_Enabled : boolean : local;
  CA_HVI : int : local;
  CA_Warning :int: local;
  Warning :int: local;
  ThreatCA:int:local;
  
  AccelPedal :int: local;


  entry : {
	BoolTRUE:=true;
	BoolFALSE:=false;
	minusten:=0-10;
	minusone:=0-1;

	PRNDL_In:=3;
        
	CA_Enabled:=true;
	
  }
  exit  : {
  	
  } 
  functions {
  input<||>() : int;
 
  }
  
  
shell sh{
entry:{}
exit:{}


state sensor{
entry:{}
exit:{}
	state sense{
			from_min:int:local;
			from_max:int:local;
			to_min:int:local;
			to_max:int:local;
			to_min_threat:int:local;
			to_max_threat:int:local;
			
		entry:{


			Speed:=input<||>();
			BrakePedal:=input<||>();
			AccelPedal:=input<||>();
			ThreatCA:=input<||>();
			from_min:= minusten * 2;
			from_max:= 20;
			to_min:= 0;
			to_max:= 100;
			to_min_threat:=0;
			to_max_threat:=3;
			
			if (Speed < from_min)
				Speed := to_min;
			    else if (Speed > from_max)
				Speed := to_max;
			    else {
				Speed := (((Speed - from_min) * (to_max - to_min)) / (from_max - from_min)) + to_min;
			    }
			    
			    if (BrakePedal < from_min)
				BrakePedal := to_min;
			    else if (BrakePedal > from_max)
				BrakePedal := to_max;
			    else {
				BrakePedal := (((BrakePedal - from_min) * (to_max - to_min)) / (from_max - from_min)) + to_min;
			    }
			    
			     if (AccelPedal < from_min)
				AccelPedal := to_min;
			    else if (AccelPedal > from_max)
				AccelPedal := to_max;
			    else {
				AccelPedal := (((AccelPedal - from_min) * (to_max - to_min)) / (from_max - from_min)) + to_min;
			    }
			    
			    
			    if (ThreatCA < from_min)
				ThreatCA := to_min_threat;
			    else if (ThreatCA > from_max)
				ThreatCA := to_max_threat;
			    else {
				ThreatCA := (((ThreatCA - from_min) * (to_max_threat - to_min)) / (from_max - from_min)) + to_min_threat;
			    }
			    

	 		
		}
		exit:{}	
	}
	transition t33{
		source: casense.sh.sensor.sense;
		destination: casense.sh.sensor.sense;
		trigger: e;
		guard:true; 
		action:{}
		}
}

state  CollisionAvoidance{
  

  

  entry : {}

  exit  : {} 
  state Disabled{
   entry: {}
   exit : {}
  }
  state Override{
   entry: {}
   exit : {}
  }
  state Fail{
   entry: {}
   exit : {}
  }
  state Enabled{
 

   
   entry: {
   

   }
   exit : {}
   state Disengaged{
     entry: {}
     exit : {}
   }
   state Engaged{

	 Set_Brake:int:local;
	
	 
	 entry: {

	 }
     exit : {}
	 
	 state Idle{
	 entry: {}
     exit : {}
	 }
	 
	 state Warn{
	 entry: {}
     exit : {}
	 }
	 
	 state Avoid{
	 entry: {}
     exit : {}
	}
	
	state Mitigate{
	 entry: {}
     exit : {}
    }
	transition t19{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Idle;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Warn;
    trigger: e;
    guard:(ThreatCA=1);
    action:{Warning:=1;}
    }
	
	transition t20{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Warn;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Idle;
    trigger: e;
    guard:(ThreatCA=0);
    action:{Warning:=0;}
    }
	
	transition t21{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Avoid;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Warn;
    trigger: e;
    guard:(ThreatCA=1);
    action:{Warning:=1;}
    }
	
	transition t22{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Warn;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Avoid;
    trigger: e;
    guard:(ThreatCA=2);
    action:{Warning:=2; Set_Brake:=30;}
    }
	
	transition t23{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Avoid;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Idle;
    trigger: e;
    guard:(ThreatCA=0);
    action:{Warning:=0;}
    }
	
	transition t33{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Idle;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Avoid;
    trigger: e;
    guard:(ThreatCA=2);
    action:{Warning:=2;Set_Brake:=30;}
    }
	
	transition t34{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Mitigate;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Idle;
    trigger: e;
    guard:(ThreatCA=0);
    action:{Warning:=0;}
    }
	
	transition t35{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Idle;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Mitigate;
    trigger: e;
    guard:(ThreatCA=3);
    action:{Warning:=3; Set_Brake:=80;}
    }
	
	transition t29{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Warn;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Mitigate;
    trigger: e;
    guard:(ThreatCA=3);
    action:{Warning:=3;Set_Brake:=80;}
    }
	
	transition t31{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Mitigate;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Warn;
    trigger: e;
    guard:(ThreatCA=1);
    action:{Warning:=1;}
    }
	
	transition t30{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Avoid;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Mitigate;
    trigger: e;
    guard:(ThreatCA=3);
    action:{Warning:=3;Set_Brake:=80;}
    }
	
	transition t32{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged.Mitigate;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged.Avoid;
    trigger: e;
    guard:(ThreatCA=2);
    action:{Warning:=2;Set_Brake:=30;}
    }
	
   }
   state Halt{
	 entry: {}
     exit : {}
   }
   transition t16{
    source: casense.sh.CollisionAvoidance.Enabled.Disengaged;
    destination: casense.sh.CollisionAvoidance.Enabled.Engaged;
    trigger: e;
    guard:(Speed>25)&&(PRNDL_In=3);
    action:{CA_HVI:=2;}
  }
   
   transition t17{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged;
    destination: casense.sh.CollisionAvoidance.Enabled.Disengaged;
    trigger: e1;
    guard:((Speed>0)&&(Speed<=25))||(PRNDL_In!=3);
    action:{CA_HVI:=1;Warning:=0;}
  }
   
   transition t24{
    source: casense.sh.CollisionAvoidance.Enabled.Halt;
    destination: casense.sh.CollisionAvoidance.Enabled.Disengaged;
    trigger: e;
    guard:(BrakePedal>10);
    action:{CA_HVI:=1;Warning:=0;}
  }
   
   transition t25{
    source: casense.sh.CollisionAvoidance.Enabled.Engaged;
    destination: casense.sh.CollisionAvoidance.Enabled.Halt;
    trigger: e;
    guard:(Speed=1);
    action:{CA_HVI:=1;Warning:=4;}
  }
   
  }
  transition t14{
  source: casense.sh.CollisionAvoidance.Disabled;
  destination: casense.sh.CollisionAvoidance.Enabled;
  trigger: e;
  guard:(CA_Enabled=BoolTRUE);
  action:{CA_HVI:=1;}
  }
  
  transition t15{
  source: casense.sh.CollisionAvoidance.Enabled;
  destination: casense.sh.CollisionAvoidance.Disabled;
  trigger: e;
  guard:(CA_Enabled!=BoolTRUE);
  action:{CA_HVI:=0;Warning:=0;}
  }
   
  transition t38{
  source: casense.sh.CollisionAvoidance.Override;
  destination: casense.sh.CollisionAvoidance.Disabled;
  trigger: e;
  guard:(CA_Enabled!=BoolTRUE);
  action:{CA_HVI:=0;Warning:=0;}
  }
  
  transition t36{
  source: casense.sh.CollisionAvoidance.Enabled;
  destination: casense.sh.CollisionAvoidance.Override;
  trigger: e;
  guard:(AccelPedal>=35);
  action:{CA_HVI:=4;Warning:=0;}
  }
  
  transition t37{
  source: casense.sh.CollisionAvoidance.Override;
  destination: casense.sh.CollisionAvoidance.Enabled;
  trigger: e;
  guard:(AccelPedal<35);
  action:{CA_HVI:=1;}
  }
  
/*  transition t39{
  source: casense.sh.CollisionAvoidance.Override;
  destination: casense.sh.CollisionAvoidance.Fail;
  trigger: Error;
  guard:true;
  action:{CA_HVI:=3;}
  }
  
  transition t27{
  source: casense.sh.CollisionAvoidance.Enabled;
  destination: casense.sh.CollisionAvoidance.Fail;
  trigger: Error;
  guard:true;
  action:{CA_HVI:=3;Warning:=0;}
  }*/
  
}
}
}

