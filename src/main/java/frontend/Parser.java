
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package frontend;

import java_cup.runtime.*;
import java_cup.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\005\003\000\002\005" +
    "\005\000\002\002\016\000\002\037\006\000\002\037\002" +
    "\000\002\040\004\000\002\040\002\000\002\041\003\000" +
    "\002\041\003\000\002\042\010\000\002\043\003\000\002" +
    "\043\002\000\002\044\005\000\002\044\003\000\002\031" +
    "\007\000\002\031\012\000\002\035\006\000\002\035\002" +
    "\000\002\034\005\000\002\034\002\000\002\021\011\000" +
    "\002\021\014\000\002\017\003\000\002\017\002\000\002" +
    "\020\005\000\002\020\003\000\002\022\006\000\002\022" +
    "\002\000\002\023\004\000\002\023\002\000\002\003\013" +
    "\000\002\047\005\000\002\047\002\000\002\050\005\000" +
    "\002\050\002\000\002\006\004\000\002\006\002\000\002" +
    "\004\026\000\002\036\006\000\002\036\002\000\002\007" +
    "\004\000\002\007\002\000\002\012\003\000\002\012\005" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\005\000\002\012\003\000\002\027\006\000\002" +
    "\024\006\000\002\024\005\000\002\025\003\000\002\025" +
    "\002\000\002\026\005\000\002\026\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\010\004\000\002\010\002\000\002\011\004\000" +
    "\002\011\006\000\002\011\005\000\002\011\007\000\002" +
    "\011\005\000\002\013\004\000\002\013\002\000\002\014" +
    "\004\000\002\014\004\000\002\015\005\000\002\016\006" +
    "\000\002\045\003\000\002\045\006\000\002\046\005\000" +
    "\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\026\005\001\002\000\004\002\303\001" +
    "\002\000\004\004\006\001\002\000\004\007\007\001\002" +
    "\000\024\004\ufffc\010\ufffc\027\ufffc\030\ufffc\036\ufffc\037" +
    "\ufffc\040\ufffc\060\010\062\ufffc\001\002\000\004\007\253" +
    "\001\002\000\022\004\uffef\010\uffef\027\uffef\030\uffef\036" +
    "\uffef\037\uffef\040\012\062\uffef\001\002\000\004\007\246" +
    "\001\002\000\020\004\uffb2\010\uffb2\027\uffb2\030\uffb2\036" +
    "\uffb2\037\uffb2\062\uffb2\001\002\000\020\004\017\010\uffe0" +
    "\027\uffe0\030\uffe0\036\016\037\uffe0\062\uffe0\001\002\000" +
    "\020\004\uffb3\010\uffb3\027\uffb3\030\uffb3\036\uffb3\037\uffb3" +
    "\062\uffb3\001\002\000\004\016\244\001\002\000\006\016" +
    "\152\021\241\001\002\000\004\015\240\001\002\000\014" +
    "\010\uffde\027\uffde\030\uffde\037\025\062\uffde\001\002\000" +
    "\004\015\023\001\002\000\020\004\uffb1\010\uffb1\027\uffb1" +
    "\030\uffb1\036\uffb1\037\uffb1\062\uffb1\001\002\000\012\010" +
    "\uffe5\027\uffe5\030\uffe5\062\131\001\002\000\004\016\026" +
    "\001\002\000\024\004\037\005\043\006\041\007\031\011" +
    "\044\023\027\024\033\055\032\056\034\001\002\000\016" +
    "\004\037\005\043\006\041\011\044\055\032\056\034\001" +
    "\002\000\040\015\uffd6\020\067\022\123\041\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\001\002\000\026\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\023\uffb9\024" +
    "\uffb9\055\uffb9\056\uffb9\001\002\000\062\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\011\uffc8\012\uffc8\015\uffc8\017\uffc8\023" +
    "\uffc8\024\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\001\002\000\016\004\037\005\043" +
    "\006\041\011\044\055\032\056\034\001\002\000\062\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\012\uffc7\015\uffc7" +
    "\017\uffc7\023\uffc7\024\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\056\uffc7\001\002\000\012\010" +
    "\uffdf\027\uffdf\030\uffdf\062\uffdf\001\002\000\062\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\015\uffd0\017" +
    "\uffd0\023\uffd0\024\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002\000\070\004\000" +
    "\005\000\006\000\007\000\011\000\012\000\013\101\015" +
    "\000\017\000\020\000\022\000\023\000\024\000\041\000" +
    "\042\000\043\000\044\000\045\000\046\000\047\000\050" +
    "\000\051\000\052\000\053\000\054\000\055\000\056\000" +
    "\001\002\000\034\015\100\041\050\042\065\043\052\044" +
    "\062\045\051\046\057\047\055\050\064\051\056\052\054" +
    "\053\063\054\060\001\002\000\062\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\011\uffd2\012\uffd2\015\uffd2\017\uffd2\023\uffd2" +
    "\024\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\001\002\000\004\011\071\001\002\000" +
    "\062\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3" +
    "\015\uffd3\017\uffd3\023\uffd3\024\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\001\002\000" +
    "\016\004\037\005\043\006\041\011\044\055\032\056\034" +
    "\001\002\000\062\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011" +
    "\uffd4\012\uffd4\015\uffd4\017\uffd4\023\uffd4\024\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\001\002\000\064\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011" +
    "\uffd6\012\uffd6\015\uffd6\017\uffd6\020\067\023\uffd6\024\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\001\002\000\034\012\061\041\050\042\065\043" +
    "\052\044\062\045\051\046\057\047\055\050\064\051\056" +
    "\052\054\053\063\054\060\001\002\000\016\004\uffbc\005" +
    "\uffbc\006\uffbc\011\uffbc\055\uffbc\056\uffbc\001\002\000\016" +
    "\004\uffc2\005\uffc2\006\uffc2\011\uffc2\055\uffc2\056\uffc2\001" +
    "\002\000\016\004\uffbe\005\uffbe\006\uffbe\011\uffbe\055\uffbe" +
    "\056\uffbe\001\002\000\016\004\037\005\043\006\041\011" +
    "\044\055\032\056\034\001\002\000\016\004\uffc6\005\uffc6" +
    "\006\uffc6\011\uffc6\055\uffc6\056\uffc6\001\002\000\016\004" +
    "\uffc0\005\uffc0\006\uffc0\011\uffc0\055\uffc0\056\uffc0\001\002" +
    "\000\016\004\uffc4\005\uffc4\006\uffc4\011\uffc4\055\uffc4\056" +
    "\uffc4\001\002\000\016\004\uffc1\005\uffc1\006\uffc1\011\uffc1" +
    "\055\uffc1\056\uffc1\001\002\000\016\004\uffc3\005\uffc3\006" +
    "\uffc3\011\uffc3\055\uffc3\056\uffc3\001\002\000\062\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012\uffd1\015\uffd1\017" +
    "\uffd1\023\uffd1\024\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002\000\016\004\uffbd" +
    "\005\uffbd\006\uffbd\011\uffbd\055\uffbd\056\uffbd\001\002\000" +
    "\016\004\uffc5\005\uffc5\006\uffc5\011\uffc5\055\uffc5\056\uffc5" +
    "\001\002\000\016\004\uffbf\005\uffbf\006\uffbf\011\uffbf\055" +
    "\uffbf\056\uffbf\001\002\000\016\004\uffbb\005\uffbb\006\uffbb" +
    "\011\uffbb\055\uffbb\056\uffbb\001\002\000\062\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\015\uffd5\017\uffd5" +
    "\023\uffd5\024\uffd5\041\050\042\065\043\052\044\062\045" +
    "\051\046\057\047\055\050\064\051\056\052\054\053\063" +
    "\054\060\055\uffd5\056\uffd5\001\002\000\004\004\070\001" +
    "\002\000\066\004\uffff\005\uffff\006\uffff\007\uffff\011\uffff" +
    "\012\uffff\015\uffff\017\uffff\020\uffff\022\uffff\023\uffff\024" +
    "\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055" +
    "\uffff\056\uffff\001\002\000\020\004\037\005\043\006\041" +
    "\011\044\012\uffcb\055\032\056\034\001\002\000\006\012" +
    "\uffcc\017\076\001\002\000\004\012\075\001\002\000\036" +
    "\012\uffc9\017\uffc9\041\050\042\065\043\052\044\062\045" +
    "\051\046\057\047\055\050\064\051\056\052\054\053\063" +
    "\054\060\001\002\000\062\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\011\uffcf\012\uffcf\015\uffcf\017\uffcf\023\uffcf\024\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\001\002\000\016\004\037\005\043\006\041\011" +
    "\044\055\032\056\034\001\002\000\036\012\uffca\017\uffca" +
    "\041\050\042\065\043\052\044\062\045\051\046\057\047" +
    "\055\050\064\051\056\052\054\053\063\054\060\001\002" +
    "\000\040\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8\037\uffb8" +
    "\055\uffb8\056\uffb8\062\uffb8\001\002\000\006\004\105\014" +
    "\103\001\002\000\006\014\113\017\110\001\002\000\004" +
    "\011\uffcd\001\002\000\006\014\uffaa\017\uffaa\001\002\000" +
    "\014\012\uffad\013\106\014\uffad\015\uffad\017\uffad\001\002" +
    "\000\004\004\105\001\002\000\006\014\111\017\110\001" +
    "\002\000\004\004\105\001\002\000\012\012\uffac\014\uffac" +
    "\015\uffac\017\uffac\001\002\000\006\014\uffab\017\uffab\001" +
    "\002\000\004\011\uffce\001\002\000\054\004\037\005\043" +
    "\006\041\007\031\011\044\023\027\024\033\041\050\042" +
    "\065\043\052\044\062\045\051\046\057\047\055\050\064" +
    "\051\056\052\054\053\063\054\060\055\032\056\034\001" +
    "\002\000\004\025\116\001\002\000\024\004\037\005\043" +
    "\006\041\007\031\011\044\023\027\024\033\055\032\056" +
    "\034\001\002\000\040\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030" +
    "\uffb5\037\uffb5\055\uffb5\056\uffb5\062\uffb5\001\002\000\026" +
    "\004\037\005\043\006\041\007\031\010\122\011\044\023" +
    "\027\024\033\055\032\056\034\001\002\000\026\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\023\uffba\024" +
    "\uffba\055\uffba\056\uffba\001\002\000\040\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\027\uffb6\030\uffb6\037\uffb6\055\uffb6\056\uffb6\062\uffb6" +
    "\001\002\000\016\004\037\005\043\006\041\011\044\055" +
    "\032\056\034\001\002\000\034\015\125\041\050\042\065" +
    "\043\052\044\062\045\051\046\057\047\055\050\064\051" +
    "\056\052\054\053\063\054\060\001\002\000\040\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\027\uffb7\030\uffb7\037\uffb7\055\uffb7\056\uffb7" +
    "\062\uffb7\001\002\000\054\004\037\005\043\006\041\007" +
    "\031\011\044\023\027\024\033\041\050\042\065\043\052" +
    "\044\062\045\051\046\057\047\055\050\064\051\056\052" +
    "\054\053\063\054\060\055\032\056\034\001\002\000\040" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\037\uffb4\055\uffb4" +
    "\056\uffb4\062\uffb4\001\002\000\010\010\uffdc\027\uffdc\030" +
    "\uffdc\001\002\000\004\007\132\001\002\000\006\004\uffe3" +
    "\010\uffe3\001\002\000\006\004\135\010\134\001\002\000" +
    "\010\010\uffe6\027\uffe6\030\uffe6\001\002\000\006\011\137" +
    "\013\140\001\002\000\006\004\uffe4\010\uffe4\001\002\000" +
    "\006\004\150\012\uffe9\001\002\000\006\004\142\014\ufff5" +
    "\001\002\000\006\014\ufff6\017\162\001\002\000\006\014" +
    "\ufff3\017\ufff3\001\002\000\004\014\144\001\002\000\004" +
    "\011\145\001\002\000\006\004\150\012\uffe9\001\002\000" +
    "\006\012\uffea\017\160\001\002\000\004\012\154\001\002" +
    "\000\004\016\152\001\002\000\006\012\uffe7\017\uffe7\001" +
    "\002\000\004\004\105\001\002\000\010\012\uffaf\015\uffaf" +
    "\017\uffaf\001\002\000\004\016\155\001\002\000\004\004" +
    "\105\001\002\000\004\015\157\001\002\000\006\004\uffeb" +
    "\010\uffeb\001\002\000\004\004\150\001\002\000\006\012" +
    "\uffe8\017\uffe8\001\002\000\004\004\163\001\002\000\006" +
    "\014\ufff4\017\ufff4\001\002\000\004\012\165\001\002\000" +
    "\004\016\166\001\002\000\004\004\105\001\002\000\004" +
    "\015\170\001\002\000\006\004\uffec\010\uffec\001\002\000" +
    "\010\010\uffd7\027\173\030\uffd7\001\002\000\010\010\uffdd" +
    "\027\uffdd\030\uffdd\001\002\000\004\004\230\001\002\000" +
    "\006\010\176\030\175\001\002\000\004\004\200\001\002" +
    "\000\004\002\ufffe\001\002\000\006\010\uffd8\030\uffd8\001" +
    "\002\000\004\007\201\001\002\000\004\031\202\001\002" +
    "\000\004\016\203\001\002\000\004\004\205\001\002\000" +
    "\006\015\206\020\067\001\002\000\006\015\000\020\000" +
    "\001\002\000\004\032\207\001\002\000\004\016\210\001" +
    "\002\000\004\004\205\001\002\000\006\015\212\020\067" +
    "\001\002\000\006\033\214\034\uffd9\001\002\000\004\034" +
    "\220\001\002\000\004\016\215\001\002\000\004\004\216" +
    "\001\002\000\004\015\217\001\002\000\004\034\uffda\001" +
    "\002\000\004\016\221\001\002\000\016\004\037\005\043" +
    "\006\041\011\044\055\032\056\034\001\002\000\034\015" +
    "\223\041\050\042\065\043\052\044\062\045\051\046\057" +
    "\047\055\050\064\051\056\052\054\053\063\054\060\001" +
    "\002\000\004\035\224\001\002\000\004\016\225\001\002" +
    "\000\024\004\037\005\043\006\041\007\031\011\044\023" +
    "\027\024\033\055\032\056\034\001\002\000\004\010\227" +
    "\001\002\000\006\010\uffdb\030\uffdb\001\002\000\004\007" +
    "\231\001\002\000\016\004\uffb2\010\uffb2\027\uffb2\030\uffb2" +
    "\036\uffb2\037\uffb2\001\002\000\016\004\017\010\uffe0\027" +
    "\uffe0\030\uffe0\036\016\037\uffe0\001\002\000\012\010\uffde" +
    "\027\uffde\030\uffde\037\025\001\002\000\010\010\uffdc\027" +
    "\uffdc\030\uffdc\001\002\000\010\010\uffd7\027\173\030\uffd7" +
    "\001\002\000\006\010\237\030\175\001\002\000\010\010" +
    "\uffe2\027\uffe2\030\uffe2\001\002\000\020\004\uffb0\010\uffb0" +
    "\027\uffb0\030\uffb0\036\uffb0\037\uffb0\062\uffb0\001\002\000" +
    "\004\016\242\001\002\000\004\004\105\001\002\000\004" +
    "\015\uffae\001\002\000\024\004\037\005\043\006\041\007" +
    "\031\011\044\023\027\024\033\055\032\056\034\001\002" +
    "\000\014\010\uffe1\027\uffe1\030\uffe1\037\uffe1\062\uffe1\001" +
    "\002\000\006\004\uffed\010\uffed\001\002\000\006\004\250" +
    "\010\251\001\002\000\004\015\252\001\002\000\020\004" +
    "\ufff0\010\ufff0\027\ufff0\030\ufff0\036\ufff0\037\ufff0\062\ufff0" +
    "\001\002\000\006\004\uffee\010\uffee\001\002\000\010\010" +
    "\ufffa\057\ufffa\061\ufffa\001\002\000\010\010\257\057\260" +
    "\061\262\001\002\000\010\010\ufffb\057\ufffb\061\ufffb\001" +
    "\002\000\010\010\ufff9\057\ufff9\061\ufff9\001\002\000\022" +
    "\004\ufffd\010\ufffd\027\ufffd\030\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\062\ufffd\001\002\000\006\004\270\013\271\001\002" +
    "\000\010\010\ufff8\057\ufff8\061\ufff8\001\002\000\004\004" +
    "\263\001\002\000\004\013\264\001\002\000\006\004\142" +
    "\014\ufff5\001\002\000\004\014\266\001\002\000\004\015" +
    "\267\001\002\000\010\010\ufff7\057\ufff7\061\ufff7\001\002" +
    "\000\004\007\300\001\002\000\006\004\142\014\ufff5\001" +
    "\002\000\004\014\273\001\002\000\004\004\274\001\002" +
    "\000\004\007\275\001\002\000\006\004\uffb2\010\uffb2\001" +
    "\002\000\006\004\017\010\277\001\002\000\010\010\ufff1" +
    "\057\ufff1\061\ufff1\001\002\000\006\004\uffb2\010\uffb2\001" +
    "\002\000\006\004\017\010\302\001\002\000\010\010\ufff2" +
    "\057\ufff2\061\ufff2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\010\001\001" +
    "\000\002\001\001\000\004\035\012\001\001\000\002\001" +
    "\001\000\004\013\013\001\001\000\012\014\014\015\021" +
    "\016\017\047\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\127\001\001\000\002\001\001\000\016\005\027\011\034" +
    "\012\037\024\041\027\035\032\044\001\001\000\014\005" +
    "\045\012\125\024\041\027\035\032\044\001\001\000\002" +
    "\001\001\000\004\010\117\001\001\000\002\001\001\000" +
    "\014\005\045\012\113\024\041\027\035\032\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\045\012" +
    "\046\024\041\027\035\032\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\045" +
    "\012\065\024\041\027\035\032\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\045\012\073\024\041\025\072\026\071\027\035" +
    "\032\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\052\001\001\000\002\001\001\000\014\005\045" +
    "\012\076\024\041\027\035\032\044\001\001\000\004\033" +
    "\052\001\001\000\002\001\001\000\006\045\103\046\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\103\046\106\001\001" +
    "\000\002\001\001\000\004\045\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\027" +
    "\011\114\012\037\024\041\027\035\032\044\033\052\001" +
    "\001\000\002\001\001\000\016\005\027\011\116\012\037" +
    "\024\041\027\035\032\044\001\001\000\002\001\001\000" +
    "\016\005\027\011\120\012\037\024\041\027\035\032\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\045\012\123\024\041\027\035\032\044\001\001\000\004" +
    "\033\052\001\001\000\002\001\001\000\020\005\027\011" +
    "\126\012\037\024\041\027\035\032\044\033\052\001\001" +
    "\000\002\001\001\000\004\006\170\001\001\000\002\001" +
    "\001\000\004\023\132\001\001\000\004\021\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\150\017\163\020\145\001\001\000\006\043\142" +
    "\044\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\150\017\146" +
    "\020\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\171\007\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\210\001\001\000\002\001\001\000\004\036" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\045\012\221\024\041\027\035\032\044" +
    "\001\001\000\004\033\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\027\011\225\012\037\024\041" +
    "\027\035\032\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\231\001\001\000\012" +
    "\014\014\015\021\016\017\047\232\001\001\000\004\050" +
    "\233\001\001\000\004\006\234\001\001\000\006\003\171" +
    "\007\235\001\001\000\004\004\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\242" +
    "\001\001\000\002\001\001\000\016\005\027\011\244\012" +
    "\037\024\041\027\035\032\044\001\001\000\002\001\001" +
    "\000\004\034\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\253" +
    "\001\001\000\010\031\260\041\254\042\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\264\044\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\271\044\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\275\001\001\000" +
    "\010\014\014\015\021\016\017\001\001\000\002\001\001" +
    "\000\004\013\300\001\001\000\010\014\014\015\021\016" +
    "\017\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static String strliteral = "";

  public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
      + " column " + s.right+"Symbol <"+s.toString()+">");
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


  ast.Statechart statechart = null;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statechart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Statechart start_val = (ast.Statechart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // name ::= IDENTIFIER 
            {
              ast.Name RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.Name(id);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // name ::= name DOT IDENTIFIER 
            {
              ast.Name RESULT =null;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Name idlist = (ast.Name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = idlist;
      RESULT.add(id);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statechart ::= STATECHART IDENTIFIER LBRACE typelist eventlist decl_list entry_clause exit_clause funcdecls states transitions RBRACE 
            {
              ast.Statechart RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		List<ast.Type> tlist = (List<ast.Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<String> el = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ast.Statement en = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.Statement ex = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fdeclsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fdeclsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<ast.FunctionDeclaration> fdecls = (List<ast.FunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ast.State> st = (List<ast.State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Transition> tr = (List<ast.Transition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.Statechart(id, tlist, el, dlist, en, ex, fdecls, st, tr);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statechart",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // typelist ::= TYPES LBRACE typedecls RBRACE 
            {
              List<ast.Type> RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Type> decls = (List<ast.Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = decls;    
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // typelist ::= 
            {
              List<ast.Type> RESULT =null;
		
    RESULT = new ArrayList<ast.Type>();
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typelist",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typedecls ::= typedecls typedecl 
            {
              List<ast.Type> RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Type> decls = (List<ast.Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Type decl = (ast.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = decls;
      RESULT.add(decl);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecls",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // typedecls ::= 
            {
              List<ast.Type> RESULT =null;
		
      RESULT = new ArrayList<ast.Type>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecls",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // typedecl ::= polytypedecl 
            {
              ast.Type RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Type decls = (ast.Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = decls;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecl",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // typedecl ::= struct 
            {
              ast.Type RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Struct str = (ast.Struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = str;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecl",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // polytypedecl ::= TYPE IDENTIFIER LTRI tparams RTRI SEMICOLON 
            {
              ast.Type RESULT =null;
		int tnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String tname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = new ast.BasicType(tname, params);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("polytypedecl",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tparams ::= ne_tparams 
            {
              List<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = params;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tparams",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tparams ::= 
            {
              List<String> RESULT =null;
		
    RESULT = new ArrayList<String>();
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tparams",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ne_tparams ::= ne_tparams COMMA IDENTIFIER 
            {
              List<String> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = params;
    RESULT.add(param);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ne_tparams",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ne_tparams ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new ArrayList<String>();
    RESULT.add(param);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ne_tparams",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // struct ::= STRUCT IDENTIFIER LBRACE decl_list RBRACE 
            {
              ast.Struct RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.Struct(id, dlist, new ArrayList<String>());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // struct ::= STRUCT LTRI tparams RTRI IDENTIFIER LBRACE decl_list RBRACE 
            {
              ast.Struct RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.Struct(id, dlist, params);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // eventlist ::= EVENTS LBRACE events RBRACE 
            {
              List<String> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> el = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = el;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eventlist",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // eventlist ::= 
            {
              List<String> RESULT =null;
		
      RESULT = new ArrayList<String>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eventlist",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // events ::= events IDENTIFIER SEMICOLON 
            {
              List<String> RESULT =null;
		int eventlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eventlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> eventlist = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = eventlist;
      for(String event : eventlist) {
        if(event.equals(e)) {
          throw new Exception("Duplicate event" + e);
        }
      }
      RESULT.add(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("events",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // events ::= 
            {
              List<String> RESULT =null;
		
       RESULT = new ArrayList<String>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("events",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcdecl ::= IDENTIFIER LPAREN param_list RPAREN COLON typename SEMICOLON 
            {
              ast.FunctionDeclaration RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.DeclarationList params = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.TypeName tname = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new ast.FunctionDeclaration(fname, tname, params);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcdecl ::= IDENTIFIER LTRI tparams RTRI LPAREN param_list RPAREN COLON typename SEMICOLON 
            {
              ast.FunctionDeclaration RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int typarsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int typarsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<String> typars = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.DeclarationList params = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.TypeName tname = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new ast.FunctionDeclaration(fname, typars, tname, params);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param_list ::= non_empty_param_list 
            {
              ast.DeclarationList RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.DeclarationList params = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = params;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param_list ::= 
            {
              ast.DeclarationList RESULT =null;
		
    RESULT = new ast.DeclarationList();
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // non_empty_param_list ::= non_empty_param_list COMMA normal_decl 
            {
              ast.DeclarationList RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.DeclarationList params = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Declaration param = (ast.Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = params;
    if(!RESULT.add(param)) {
      throw new Exception("Duplication parameter name '" + param.vname + "' function parameter list.");
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_param_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // non_empty_param_list ::= normal_decl 
            {
              ast.DeclarationList RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Declaration param = (ast.Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new ast.DeclarationList();
    RESULT.add(param);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_param_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcdecls ::= FUNCTIONS LBRACE funcs RBRACE 
            {
              List<ast.FunctionDeclaration> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.FunctionDeclaration> fs = (List<ast.FunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = fs;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdecls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcdecls ::= 
            {
              List<ast.FunctionDeclaration> RESULT =null;
		
    RESULT = new ArrayList<ast.FunctionDeclaration>();
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdecls",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcs ::= funcs funcdecl 
            {
              List<ast.FunctionDeclaration> RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.FunctionDeclaration> decs = (List<ast.FunctionDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.FunctionDeclaration dec = (ast.FunctionDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = decs;
    for(ast.FunctionDeclaration f : decs) {
      if(f.name.equals(dec.name)) {
        throw new Exception("Duplicate function name " + dec.name);
      }
    }

    RESULT.add(dec);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcs",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcs ::= 
            {
              List<ast.FunctionDeclaration> RESULT =null;
		
      RESULT = new ArrayList<ast.FunctionDeclaration>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcs",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // state ::= STATE IDENTIFIER LBRACE decl_list entry_clause exit_clause states transitions RBRACE 
            {
              ast.State RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ast.Statement en = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Statement ex = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ast.State> st = (List<ast.State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Transition> tr = (List<ast.Transition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.State(id, dlist, en, ex, st, tr);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("state",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // entry_clause ::= ENTRY COLON statement 
            {
              ast.Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Statement a = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entry_clause",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // entry_clause ::= 
            {
              ast.Statement RESULT =null;
		
      RESULT = new ast.StatementList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entry_clause",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exit_clause ::= EXIT COLON statement 
            {
              ast.Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Statement a = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_clause",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exit_clause ::= 
            {
              ast.Statement RESULT =null;
		
      RESULT = new ast.StatementList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exit_clause",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // states ::= states state 
            {
              List<ast.State> RESULT =null;
		int slistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.State> slist = (List<ast.State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.State s = (ast.State)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = slist;
      for(ast.State st : slist) {
        if(st.name.equals(s.name)) {
          throw new Exception("Duplicate state name " + s.name);
        }
      }
      RESULT.add(s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("states",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // states ::= 
            {
              List<ast.State> RESULT =null;
		
       RESULT = new ArrayList<ast.State>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("states",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // transition ::= TRANSITION IDENTIFIER LBRACE SRC COLON name SEMICOLON DEST COLON name SEMICOLON trigger GUARD COLON expr SEMICOLON ACTION COLON statement RBRACE 
            {
              ast.Transition RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-18)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-18)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		ast.Name src = (ast.Name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		ast.Name des = (ast.Name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ast.Expression g = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Statement a = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.Transition(id, src, des, t, g, a);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transition",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // trigger ::= TRIGGER COLON IDENTIFIER SEMICOLON 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trigger",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // trigger ::= 
            {
              String RESULT =null;
		
      RESULT = "eNone";
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trigger",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // transitions ::= transitions transition 
            {
              List<ast.Transition> RESULT =null;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Transition> tlist = (List<ast.Transition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Transition t = (ast.Transition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = tlist;
      for(ast.Transition tr : tlist) {
        if(tr.name.equals(t.name)) {
          throw new Exception("Duplicate transition name " + t.name);
        }
      }
      RESULT.add(t);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transitions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // transitions ::= 
            {
              List<ast.Transition> RESULT =null;
		
        RESULT = new ArrayList<ast.Transition>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("transitions",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= name 
            {
              ast.Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Name n = (ast.Name)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = n;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr binop expr 
            {
              ast.Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Expression e1 = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Expression e2 = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.BinaryExpression(e1, e2, op);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= boolconst 
            {
              ast.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.BooleanConstant e = (ast.BooleanConstant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= INTCONST 
            {
              ast.Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.IntegerConstant(n);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= STRLITERAL 
            {
              ast.Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.StringLiteral(s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= LPAREN expr RPAREN 
            {
              ast.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Expression e = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= func_call 
            {
              ast.Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.FunctionCall e = (ast.FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // func_call ::= func_name LPAREN arg_list RPAREN 
            {
              ast.FunctionCall RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.FunctionName f = (ast.FunctionName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int alistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.Expression> alist = (List<ast.Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new ast.FunctionCall(f, alist);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // func_name ::= IDENTIFIER LTRI typenames RTRI 
            {
              ast.FunctionName RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int targsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int targsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.TypeName> targs = (List<ast.TypeName>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.FunctionName(tid, targs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_name",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // func_name ::= IDENTIFIER LTRI RTRI 
            {
              ast.FunctionName RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
      RESULT = new ast.FunctionName(tid, new ArrayList<ast.TypeName>());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_name",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arg_list ::= non_empty_arg_list 
            {
              List<ast.Expression> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ast.Expression> args = (List<ast.Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = args;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arg_list ::= 
            {
              List<ast.Expression> RESULT =null;
		
    RESULT = new ArrayList<ast.Expression>();
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // non_empty_arg_list ::= non_empty_arg_list COMMA expr 
            {
              List<ast.Expression> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ast.Expression> args = (List<ast.Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Expression arg = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = args;
    RESULT.add(arg);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_arg_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // non_empty_arg_list ::= expr 
            {
              List<ast.Expression> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Expression arg = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new ArrayList<ast.Expression>();
    RESULT.add(arg);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("non_empty_arg_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // boolconst ::= TRUE 
            {
              ast.BooleanConstant RESULT =null;
		
      RESULT = new ast.BooleanConstant(true);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolconst",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // boolconst ::= FALSE 
            {
              ast.BooleanConstant RESULT =null;
		
      RESULT = new ast.BooleanConstant(false);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolconst",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // binop ::= ADD 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // binop ::= MUL 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // binop ::= SUB 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // binop ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // binop ::= GE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // binop ::= GT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binop ::= LE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= LT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= EQ 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= NE 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= AND 
            {
              String RESULT =null;
		 RESULT = "&&"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= OR 
            {
              String RESULT =null;
		 RESULT = "||"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement_list ::= statement_list statement 
            {
              ast.StatementList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.StatementList sl = (ast.StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Statement s = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      sl.add(s);
      RESULT = sl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement_list ::= 
            {
              ast.StatementList RESULT =null;
		
      RESULT = new ast.StatementList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= expr SEMICOLON 
            {
              ast.Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Expression e = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.ExpressionStatement(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= name ASSIGN expr SEMICOLON 
            {
              ast.Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Name n = (ast.Name)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Expression e = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.AssignmentStatement(n, e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= LBRACE statement_list RBRACE 
            {
              ast.Statement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.StatementList sl = (ast.StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = sl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= IF expr statement ELSE statement 
            {
              ast.Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ast.Expression e = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ast.Statement s1 = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Statement s2 = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.IfStatement(e, s1, s2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= WHILE expr statement 
            {
              ast.Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Expression e = (ast.Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Statement s = (ast.Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.WhileStatement(e, s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // decl_list ::= decl_list decl 
            {
              ast.DeclarationList RESULT =null;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.DeclarationList dlist = (ast.DeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.Declaration d = (ast.Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = dlist;
      if(!RESULT.add(d)) {
        throw new Exception("Duplication variable name '" + d.vname + "' declaration in same scope.");
      }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // decl_list ::= 
            {
              ast.DeclarationList RESULT =null;
		
      RESULT = new ast.DeclarationList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // decl ::= normal_decl SEMICOLON 
            {
              ast.Declaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Declaration d = (ast.Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = d;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // decl ::= inp_decl SEMICOLON 
            {
              ast.Declaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ast.Declaration d = (ast.Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = d;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // normal_decl ::= IDENTIFIER COLON typename 
            {
              ast.Declaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.TypeName tid = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.Declaration(id, tid, false);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normal_decl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // inp_decl ::= IDENTIFIER HASH COLON typename 
            {
              ast.Declaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.TypeName tid = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.Declaration(id, tid, true);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inp_decl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // typename ::= IDENTIFIER 
            {
              ast.TypeName RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ast.TypeName(tid);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // typename ::= IDENTIFIER LTRI typenames RTRI 
            {
              ast.TypeName RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int targsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int targsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ast.TypeName> targs = (List<ast.TypeName>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
      RESULT = new ast.TypeName(tid, targs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // typenames ::= typenames COMMA typename 
            {
              List<ast.TypeName> RESULT =null;
		int tnsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tnsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<ast.TypeName> tns = (List<ast.TypeName>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.TypeName tn = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = tns;
      RESULT.add(tn);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typenames",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // typenames ::= typename 
            {
              List<ast.TypeName> RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ast.TypeName tn = (ast.TypeName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = new ArrayList<ast.TypeName>();
      RESULT.add(tn);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typenames",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
